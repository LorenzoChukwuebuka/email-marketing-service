# Stage 1: Build the Go backend
FROM golang:1.20 AS backend-builder
WORKDIR /app/backend
COPY . .
RUN CGO_ENABLED=0 GOOS=linux go build -o main .

# Stage 2: Final backend image
FROM alpine

# Create a non-root user
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

WORKDIR /app/backend

# Install bash and nano
RUN apk update && apk add bash nano

# Copy the Go binary from the builder stage
COPY --from=backend-builder /app/backend/main .

# Copy templates directory
COPY --from=backend-builder /app/backend/api/v1/templates ./api/v1/templates

# Copy .env file for the backend
COPY .env .

# Copy healthcheck script
COPY ./healthcheck.sh /healthcheck.sh
RUN chmod +x /healthcheck.sh

# Create directories for dynamic folders
RUN mkdir -p /app/backend/smtp_settings /app/backend/uploads

# Set proper ownership and permissions
RUN chown -R appuser:appgroup /app/backend && \
    chmod -R 755 /app/backend && \
    chmod -R 775 /app/backend/smtp_settings /app/backend/uploads

# Expose backend ports
EXPOSE 9000 9001 1025 465

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD /healthcheck.sh

# Switch to non-root user
USER appuser

# Start the Go application
CMD ["./main"]




services:
  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    ports:
      - "5000:80"
    volumes:
      - ./frontend/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - go-backend

  go-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    ports:
      - "9000:9000"
      - "1025:1025"
      - "465:465"
      - "9001:9001"
    environment:
      SERVER_MODE: "production"
    env_file: 
      - ./backend/.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - smtp_settings:/app/backend/smtp_settings
      - uploads:/app/backend/uploads
      - templates:/app/backend/api/v1/templates
      - /etc/letsencrypt:/etc/letsencrypt:ro
    user: "appuser:appgroup"  # Use the non-root user we created
    cap_add:
      - NET_BIND_SERVICE
    privileged: true

networks:
  app-network:
    driver: bridge

volumes:
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/nginx_logs  # Make sure this directory exists
  smtp_settings:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/smtp_settings  # Make sure this directory exists
  uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/uploads  # Make sure this directory exists
  templates:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/templates  # Make sure this directory exists