// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO
    payments (
        company_id,
        user_id,
        subscription_id,
        payment_id,
        amount,
        currency,
        payment_method,
        status,
        notes,
        transaction_reference,
        payment_date,
        billing_period_start,
        billing_period_end
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13
    ) RETURNING id, company_id, user_id, subscription_id, payment_id, amount, currency, payment_method, status, notes, created_at, updated_at, deleted_at, transaction_reference, payment_date, billing_period_start, billing_period_end, refunded_amount, integrity_hash, refund_date
`

type CreatePaymentParams struct {
	CompanyID            uuid.UUID       `json:"company_id"`
	UserID               uuid.UUID       `json:"user_id"`
	SubscriptionID       uuid.UUID       `json:"subscription_id"`
	PaymentID            sql.NullString  `json:"payment_id"`
	Amount               decimal.Decimal `json:"amount"`
	Currency             sql.NullString  `json:"currency"`
	PaymentMethod        sql.NullString  `json:"payment_method"`
	Status               sql.NullString  `json:"status"`
	Notes                sql.NullString  `json:"notes"`
	TransactionReference sql.NullString  `json:"transaction_reference"`
	PaymentDate          sql.NullTime    `json:"payment_date"`
	BillingPeriodStart   sql.NullTime    `json:"billing_period_start"`
	BillingPeriodEnd     sql.NullTime    `json:"billing_period_end"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.CompanyID,
		arg.UserID,
		arg.SubscriptionID,
		arg.PaymentID,
		arg.Amount,
		arg.Currency,
		arg.PaymentMethod,
		arg.Status,
		arg.Notes,
		arg.TransactionReference,
		arg.PaymentDate,
		arg.BillingPeriodStart,
		arg.BillingPeriodEnd,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.UserID,
		&i.SubscriptionID,
		&i.PaymentID,
		&i.Amount,
		&i.Currency,
		&i.PaymentMethod,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TransactionReference,
		&i.PaymentDate,
		&i.BillingPeriodStart,
		&i.BillingPeriodEnd,
		&i.RefundedAmount,
		&i.IntegrityHash,
		&i.RefundDate,
	)
	return i, err
}

const updatePaymentHash = `-- name: UpdatePaymentHash :exec
UPDATE payments
SET
    integrity_hash = $1,
    updated_at = now()
WHERE
    id = $2
`

type UpdatePaymentHashParams struct {
	IntegrityHash sql.NullString `json:"integrity_hash"`
	ID            uuid.UUID      `json:"id"`
}

func (q *Queries) UpdatePaymentHash(ctx context.Context, arg UpdatePaymentHashParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentHash, arg.IntegrityHash, arg.ID)
	return err
}
