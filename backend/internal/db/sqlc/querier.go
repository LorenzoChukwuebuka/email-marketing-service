// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	// Adds a contact to a group and returns the created entry
	AddContactToGroup(ctx context.Context, arg AddContactToGroupParams) (UserContactGroup, error)
	ArchiveCampaign(ctx context.Context, id uuid.UUID) (Campaign, error)
	ArchivePlan(ctx context.Context, id uuid.UUID) (Plan, error)
	BlockUser(ctx context.Context, id uuid.UUID) error
	CampaignGroupExists(ctx context.Context, campaignID uuid.UUID) (bool, error)
	CancelInvitation(ctx context.Context, id uuid.UUID) error
	CancelUserDeletion(ctx context.Context, id uuid.UUID) (User, error)
	CheckCampaignNameExists(ctx context.Context, arg CheckCampaignNameExistsParams) (bool, error)
	CheckDomainExists(ctx context.Context, arg CheckDomainExistsParams) (bool, error)
	CheckEmailLimitExceeded(ctx context.Context, arg CheckEmailLimitExceededParams) (CheckEmailLimitExceededRow, error)
	CheckIfAPIKeyExists(ctx context.Context, apiKey string) (ApiKey, error)
	CheckIfContactEmailExists(ctx context.Context, arg CheckIfContactEmailExistsParams) (bool, error)
	CheckPaymentIntentExists(ctx context.Context, paymentID sql.NullString) (bool, error)
	CheckSMTPKeyExists(ctx context.Context, arg CheckSMTPKeyExistsParams) (bool, error)
	CheckSMTPMasterKeyExists(ctx context.Context, arg CheckSMTPMasterKeyExistsParams) (bool, error)
	CheckSenderExists(ctx context.Context, arg CheckSenderExistsParams) (bool, error)
	CheckTemplateNameExists(ctx context.Context, arg CheckTemplateNameExistsParams) (bool, error)
	CleanupExpiredInvitations(ctx context.Context) error
	// Clear the scheduled_at field after processing to prevent reprocessing
	ClearCampaignSchedule(ctx context.Context, id uuid.UUID) error
	CloseStaleTickets(ctx context.Context) ([]SupportTicket, error)
	CloseTicketByID(ctx context.Context, id uuid.UUID) (SupportTicket, error)
	CountAllUsers(ctx context.Context) (int64, error)
	// Counts total number of contact groups for a company
	CountContactGroups(ctx context.Context, companyID uuid.UUID) (int64, error)
	CountDomainByCompanyID(ctx context.Context, companyID uuid.UUID) (int64, error)
	CountSenderByCompanyID(ctx context.Context, companyID uuid.UUID) (int64, error)
	CountTemplatesByUserID(ctx context.Context, userID uuid.UUID) (int64, error)
	CountUnVerifiedUsers(ctx context.Context) (int64, error)
	CountUserCampaigns(ctx context.Context, userID uuid.UUID) (int64, error)
	CountUserCampaignsSent(ctx context.Context, userID uuid.UUID) (int64, error)
	//- Counts for user stats  ---
	CountUserContacts(ctx context.Context, userID uuid.UUID) (int64, error)
	CountUserGroups(ctx context.Context, userID uuid.UUID) (int64, error)
	CountUserTemplates(ctx context.Context, userID uuid.UUID) (int64, error)
	CountVerifiedUsers(ctx context.Context) (int64, error)
	CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (CreateAPIKeyRow, error)
	CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error)
	CreateAdminNotification(ctx context.Context, arg CreateAdminNotificationParams) (AdminNotification, error)
	CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error)
	CreateCampaignError(ctx context.Context, arg CreateCampaignErrorParams) error
	CreateCampaignGroups(ctx context.Context, arg CreateCampaignGroupsParams) error
	CreateCompany(ctx context.Context, companyname sql.NullString) (Company, error)
	CreateContact(ctx context.Context, arg CreateContactParams) error
	// Creates a new contact group
	CreateContactGroup(ctx context.Context, arg CreateContactGroupParams) (ContactGroup, error)
	CreateDailyEmailUsage(ctx context.Context, arg CreateDailyEmailUsageParams) (EmailUsage, error)
	CreateDomain(ctx context.Context, arg CreateDomainParams) (Domain, error)
	CreateEmailBox(ctx context.Context, arg CreateEmailBoxParams) (EmailBox, error)
	CreateEmailCampaignResult(ctx context.Context, arg CreateEmailCampaignResultParams) (EmailCampaignResult, error)
	CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error)
	CreateMailingLimit(ctx context.Context, arg CreateMailingLimitParams) (MailingLimit, error)
	CreateOTP(ctx context.Context, arg CreateOTPParams) (Otp, error)
	CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error)
	CreatePaymentIntent(ctx context.Context, arg CreatePaymentIntentParams) (PaymentIntent, error)
	CreatePlan(ctx context.Context, arg CreatePlanParams) (Plan, error)
	CreatePlanFeature(ctx context.Context, arg CreatePlanFeatureParams) (PlanFeature, error)
	CreateSMTPKey(ctx context.Context, arg CreateSMTPKeyParams) (SmtpKey, error)
	CreateSMTPMasterKey(ctx context.Context, arg CreateSMTPMasterKeyParams) (SmtpMasterKey, error)
	CreateSender(ctx context.Context, arg CreateSenderParams) (Sender, error)
	CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error)
	CreateSupportTicket(ctx context.Context, arg CreateSupportTicketParams) (SupportTicket, error)
	CreateSystemsSMTPSettings(ctx context.Context, arg CreateSystemsSMTPSettingsParams) (SystemsSmtpSetting, error)
	CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error)
	CreateTicketFile(ctx context.Context, arg CreateTicketFileParams) (TicketFile, error)
	CreateTicketMessage(ctx context.Context, arg CreateTicketMessageParams) (TicketMessage, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	CreateUserNotification(ctx context.Context, arg CreateUserNotificationParams) (UserNotification, error)
	DeleteAPIKey(ctx context.Context, id uuid.UUID) error
	DeleteContact(ctx context.Context, arg DeleteContactParams) error
	DeleteEmailUsageByCompanyIDAndSubscriptionID(ctx context.Context, arg DeleteEmailUsageByCompanyIDAndSubscriptionIDParams) error
	DeleteInvitation(ctx context.Context, id uuid.UUID) error
	DeleteOTPById(ctx context.Context, id uuid.UUID) error
	DeletePlanFeature(ctx context.Context, id uuid.UUID) error
	DeleteScheduledUsers(ctx context.Context) ([]User, error)
	DeleteSystemsSMTPSetting(ctx context.Context, domain sql.NullString) error
	ExpireInvitation(ctx context.Context, id uuid.UUID) error
	FindDomainByNameAndCompany(ctx context.Context, arg FindDomainByNameAndCompanyParams) (Domain, error)
	FindTicketByID(ctx context.Context, id uuid.UUID) (SupportTicket, error)
	FindUserWithAPIKey(ctx context.Context, apiKey string) (FindUserWithAPIKeyRow, error)
	GetAPIKeysByCompanyID(ctx context.Context, companyID uuid.UUID) ([]GetAPIKeysByCompanyIDRow, error)
	GetAPIKeysByUserID(ctx context.Context, userID uuid.UUID) ([]GetAPIKeysByUserIDRow, error)
	GetActiveSubscriptionByCompanyID(ctx context.Context, companyID uuid.UUID) (Subscription, error)
	// Find all active subscriptions that end within 5 days
	GetActiveSubscriptionsEndingIn5Days(ctx context.Context) ([]Subscription, error)
	// Find all active subscriptions that end within a specific number of days
	GetActiveSubscriptionsEndingInDays(ctx context.Context) ([]Subscription, error)
	// Find all active subscriptions where ends_at is greater than current time
	GetActiveSubscriptionsNotExpired(ctx context.Context) ([]Subscription, error)
	GetAdminByEmail(ctx context.Context, email string) (Admin, error)
	GetAdminByID(ctx context.Context, id uuid.UUID) (Admin, error)
	GetAdminNotifications(ctx context.Context, userID uuid.UUID) ([]AdminNotification, error)
	GetAllActiveSubscriptions(ctx context.Context) ([]Subscription, error)
	GetAllAdmins(ctx context.Context) ([]Admin, error)
	GetAllCampaignsByUser(ctx context.Context, arg GetAllCampaignsByUserParams) ([]GetAllCampaignsByUserRow, error)
	GetAllContacts(ctx context.Context, arg GetAllContactsParams) ([]GetAllContactsRow, error)
	GetAllTicketsCount(ctx context.Context) (int64, error)
	GetAllTicketsWithPagination(ctx context.Context, arg GetAllTicketsWithPaginationParams) ([]SupportTicket, error)
	GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]GetAllUsersRow, error)
	GetAllVerifiedUserEmails(ctx context.Context) ([]GetAllVerifiedUserEmailsRow, error)
	GetCampaignByID(ctx context.Context, arg GetCampaignByIDParams) (GetCampaignByIDRow, error)
	GetCampaignContactEmails(ctx context.Context, campaignID uuid.UUID) ([]string, error)
	GetCampaignContactGroups(ctx context.Context, campaignID uuid.UUID) ([]GetCampaignContactGroupsRow, error)
	GetCampaignCounts(ctx context.Context, arg GetCampaignCountsParams) (int64, error)
	GetCampaignStats(ctx context.Context, campaignID uuid.UUID) (GetCampaignStatsRow, error)
	GetCampaignsByTemplateType(ctx context.Context, arg GetCampaignsByTemplateTypeParams) ([]GetCampaignsByTemplateTypeRow, error)
	GetClosedTicketsCount(ctx context.Context) (int64, error)
	GetClosedTicketsWithPagination(ctx context.Context, arg GetClosedTicketsWithPaginationParams) ([]SupportTicket, error)
	GetCompaniesNearLimit(ctx context.Context, arg GetCompaniesNearLimitParams) ([]GetCompaniesNearLimitRow, error)
	GetCompanyByID(ctx context.Context, id uuid.UUID) (Company, error)
	// Gets a contact group by ID
	GetContactGroup(ctx context.Context, id uuid.UUID) (ContactGroup, error)
	// Gets a contact group by name within a company
	GetContactGroupByName(ctx context.Context, arg GetContactGroupByNameParams) (ContactGroup, error)
	// Get all contact statistics in a single query
	GetContactStats(ctx context.Context, arg GetContactStatsParams) (GetContactStatsRow, error)
	// Get total count of contacts for a specific user
	GetContactTotalCount(ctx context.Context, userID uuid.UUID) (int64, error)
	// Get count of unsubscribed contacts for a specific user
	GetContactUnsubscribedCount(ctx context.Context, userID uuid.UUID) (int64, error)
	GetContactsCount(ctx context.Context, arg GetContactsCountParams) (int64, error)
	GetCurrentBillingPeriod(ctx context.Context, companyID uuid.UUID) (GetCurrentBillingPeriodRow, error)
	GetCurrentEmailUsage(ctx context.Context, companyID uuid.UUID) (EmailUsage, error)
	GetCurrentRunningSubscription(ctx context.Context, companyID uuid.UUID) (GetCurrentRunningSubscriptionRow, error)
	GetDomainByIDAndCompany(ctx context.Context, arg GetDomainByIDAndCompanyParams) (Domain, error)
	GetEmailBoxByID(ctx context.Context, id uuid.UUID) (EmailBox, error)
	GetEmailCampaignResult(ctx context.Context, arg GetEmailCampaignResultParams) (EmailCampaignResult, error)
	GetEmailCampaignResultsByCampaign(ctx context.Context, arg GetEmailCampaignResultsByCampaignParams) ([]EmailCampaignResult, error)
	GetEmailCampaignResultsByRecipient(ctx context.Context, arg GetEmailCampaignResultsByRecipientParams) ([]EmailCampaignResult, error)
	GetEmailCampaignStats(ctx context.Context, arg GetEmailCampaignStatsParams) (GetEmailCampaignStatsRow, error)
	GetEmailUsageByCompany(ctx context.Context, companyID uuid.UUID) ([]EmailUsage, error)
	GetEmailUsageByCompanyAndPeriod(ctx context.Context, arg GetEmailUsageByCompanyAndPeriodParams) (EmailUsage, error)
	GetEmailUsageBySubscription(ctx context.Context, subscriptionID uuid.UUID) ([]EmailUsage, error)
	GetEmailUsageInDateRange(ctx context.Context, arg GetEmailUsageInDateRangeParams) ([]EmailUsage, error)
	GetEmailUsageStats(ctx context.Context, arg GetEmailUsageStatsParams) (GetEmailUsageStatsRow, error)
	// Find subscriptions that are marked as 'active' but have actually expired
	GetExpiredActiveSubscriptions(ctx context.Context) ([]Subscription, error)
	// Fetches all contact groups with their associated contacts for a specific user and company
	// with pagination support using limit and offset
	GetGroupsWithContacts(ctx context.Context, arg GetGroupsWithContactsParams) ([]GetGroupsWithContactsRow, error)
	GetInvitationByAcceptedUser(ctx context.Context, acceptedBy uuid.NullUUID) (GetInvitationByAcceptedUserRow, error)
	GetInvitationByID(ctx context.Context, id uuid.UUID) (Invitation, error)
	GetInvitationByToken(ctx context.Context, token string) (GetInvitationByTokenRow, error)
	GetInvitationStats(ctx context.Context, companyID uuid.UUID) (GetInvitationStatsRow, error)
	GetInvitationsByCompany(ctx context.Context, companyID uuid.UUID) ([]GetInvitationsByCompanyRow, error)
	GetLastPaymentByCompanyID(ctx context.Context, companyID uuid.UUID) (Payment, error)
	GetMailingLimitByPlanID(ctx context.Context, planID uuid.UUID) (MailingLimit, error)
	GetMasterSMTPKey(ctx context.Context, userID uuid.UUID) (SmtpMasterKey, error)
	GetMessageFiles(ctx context.Context, messageID uuid.UUID) ([]TicketFile, error)
	GetMonthlyEmailTrends(ctx context.Context, arg GetMonthlyEmailTrendsParams) ([]GetMonthlyEmailTrendsRow, error)
	// Get count of new contacts (less than 10 days old) for a specific user
	GetNewContactsCount(ctx context.Context, arg GetNewContactsCountParams) (int64, error)
	GetOTPByToken(ctx context.Context, token string) (Otp, error)
	GetPaymentCounts(ctx context.Context, companyID uuid.UUID) (int64, error)
	GetPaymentIntent(ctx context.Context, id uuid.UUID) (PaymentIntent, error)
	GetPaymentIntentByPaymentIntentID(ctx context.Context, paymentIntentID string) (PaymentIntent, error)
	GetPaymentIntentsByCompanyID(ctx context.Context, companyID uuid.UUID) ([]PaymentIntent, error)
	GetPaymentIntentsByStatus(ctx context.Context, arg GetPaymentIntentsByStatusParams) ([]PaymentIntent, error)
	GetPaymentIntentsBySubscriptionID(ctx context.Context, subscriptionID uuid.NullUUID) ([]PaymentIntent, error)
	GetPaymentIntentsByUserID(ctx context.Context, userID uuid.UUID) ([]PaymentIntent, error)
	GetPaymentsByCompanyAndUser(ctx context.Context, arg GetPaymentsByCompanyAndUserParams) ([]GetPaymentsByCompanyAndUserRow, error)
	GetPaymentsByCompanyAndUserSimple(ctx context.Context, companyID uuid.UUID) ([]GetPaymentsByCompanyAndUserSimpleRow, error)
	GetPendingInvitationsByEmail(ctx context.Context, email string) ([]GetPendingInvitationsByEmailRow, error)
	GetPendingTicketsCount(ctx context.Context) (int64, error)
	GetPendingTicketsWithPagination(ctx context.Context, arg GetPendingTicketsWithPaginationParams) ([]SupportTicket, error)
	GetPlanByID(ctx context.Context, id uuid.UUID) (Plan, error)
	GetPlanByName(ctx context.Context, name string) (Plan, error)
	GetPlanFeaturesByPlanID(ctx context.Context, planID uuid.UUID) ([]PlanFeature, error)
	GetPlanWithDetails(ctx context.Context, id uuid.UUID) (GetPlanWithDetailsRow, error)
	GetSMTPKeyByID(ctx context.Context, arg GetSMTPKeyByIDParams) (SmtpKey, error)
	GetSMTPKeyUserAndPass(ctx context.Context, arg GetSMTPKeyUserAndPassParams) (SmtpKey, error)
	GetSMTPMasterKeyAndPass(ctx context.Context, arg GetSMTPMasterKeyAndPassParams) (SmtpMasterKey, error)
	GetSMTPSettingByDomain(ctx context.Context, domain sql.NullString) (SystemsSmtpSetting, error)
	// Get campaigns that are scheduled and due to be sent
	GetScheduledCampaignsDue(ctx context.Context, scheduledAt sql.NullTime) ([]Campaign, error)
	GetSenderById(ctx context.Context, arg GetSenderByIdParams) (Sender, error)
	// Fetches a specific contact group with all its associated contacts for a specific user and company
	GetSingleGroupWithContacts(ctx context.Context, arg GetSingleGroupWithContactsParams) ([]GetSingleGroupWithContactsRow, error)
	GetSingleUser(ctx context.Context, id uuid.UUID) (GetSingleUserRow, error)
	GetSubscriptionByID(ctx context.Context, id uuid.UUID) (Subscription, error)
	GetTemplateByID(ctx context.Context, arg GetTemplateByIDParams) (GetTemplateByIDRow, error)
	GetTemplateByIDWithoutType(ctx context.Context, arg GetTemplateByIDWithoutTypeParams) (GetTemplateByIDWithoutTypeRow, error)
	GetTicketFiles(ctx context.Context, ticketID uuid.UUID) ([]TicketFile, error)
	GetTicketWithMessages(ctx context.Context, id uuid.UUID) ([]GetTicketWithMessagesRow, error)
	GetTicketsByUserID(ctx context.Context, userID uuid.UUID) ([]SupportTicket, error)
	GetUnVerifiedUsers(ctx context.Context, arg GetUnVerifiedUsersParams) ([]GetUnVerifiedUsersRow, error)
	GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error)
	GetUserCampaignStats(ctx context.Context, userID uuid.UUID) (GetUserCampaignStatsRow, error)
	GetUserNotifications(ctx context.Context, userID uuid.UUID) ([]UserNotification, error)
	GetUserSMTPKey(ctx context.Context, userID uuid.UUID) ([]SmtpKey, error)
	GetUserSmtpKeys(ctx context.Context, userID uuid.UUID) ([]SmtpKey, error)
	GetUserWhoAcceptedInvitation(ctx context.Context, id uuid.UUID) (GetUserWhoAcceptedInvitationRow, error)
	GetUsersFromInvitations(ctx context.Context, companyID uuid.UUID) ([]GetUsersFromInvitationsRow, error)
	GetVerifiedUsers(ctx context.Context, arg GetVerifiedUsersParams) ([]GetVerifiedUsersRow, error)
	HardDeleteCampaign(ctx context.Context, id uuid.UUID) error
	// Hard deletes a contact group (use with caution)
	HardDeleteContactGroup(ctx context.Context, id uuid.UUID) error
	HardDeleteOTPById(ctx context.Context, id uuid.UUID) error
	HardDeleteTemplate(ctx context.Context, id uuid.UUID) error
	IncrementEmailsSent(ctx context.Context, arg IncrementEmailsSentParams) (EmailUsage, error)
	// Checks if a contact group name is unique within a company
	IsContactGroupNameUnique(ctx context.Context, arg IsContactGroupNameUniqueParams) (bool, error)
	// Checks if a contact is already in a specific group
	IsContactInGroup(ctx context.Context, arg IsContactInGroupParams) (bool, error)
	ListActivePlans(ctx context.Context) ([]Plan, error)
	ListAdmins(ctx context.Context) ([]Admin, error)
	ListCampaignsByCompanyID(ctx context.Context, arg ListCampaignsByCompanyIDParams) ([]ListCampaignsByCompanyIDRow, error)
	ListCampaignsByUserID(ctx context.Context, arg ListCampaignsByUserIDParams) ([]ListCampaignsByUserIDRow, error)
	ListCompanies(ctx context.Context) ([]Company, error)
	// Lists all contact groups for a company with pagination
	ListContactGroups(ctx context.Context, arg ListContactGroupsParams) ([]ContactGroup, error)
	// Lists all contact groups for a specific user with pagination
	ListContactGroupsForUser(ctx context.Context, arg ListContactGroupsForUserParams) ([]ContactGroup, error)
	ListDomainsByCompany(ctx context.Context, arg ListDomainsByCompanyParams) ([]Domain, error)
	ListEmailBoxesByMailbox(ctx context.Context, arg ListEmailBoxesByMailboxParams) ([]EmailBox, error)
	ListEmailBoxesByUser(ctx context.Context, userName sql.NullString) ([]EmailBox, error)
	ListPlansWithDetails(ctx context.Context) ([]ListPlansWithDetailsRow, error)
	ListScheduledCampaignsByCompanyID(ctx context.Context, arg ListScheduledCampaignsByCompanyIDParams) ([]ListScheduledCampaignsByCompanyIDRow, error)
	ListSendersByCompanyId(ctx context.Context, arg ListSendersByCompanyIdParams) ([]Sender, error)
	ListSubscriptionsByCompanyID(ctx context.Context, companyID uuid.UUID) ([]Subscription, error)
	ListTemplates(ctx context.Context, arg ListTemplatesParams) ([]ListTemplatesRow, error)
	ListTemplatesByCompanyID(ctx context.Context, arg ListTemplatesByCompanyIDParams) ([]ListTemplatesByCompanyIDRow, error)
	ListTemplatesByType(ctx context.Context, arg ListTemplatesByTypeParams) ([]ListTemplatesByTypeRow, error)
	ListTemplatesByUserID(ctx context.Context, arg ListTemplatesByUserIDParams) ([]ListTemplatesByUserIDRow, error)
	ListUsersByCompany(ctx context.Context, companyID uuid.UUID) ([]User, error)
	MarkAdminNotificationAsRead(ctx context.Context, id uuid.UUID) error
	MarkAllAdminNotificationsAsRead(ctx context.Context, userID uuid.UUID) error
	MarkAllUserNotificationsAsRead(ctx context.Context, userID uuid.UUID) error
	MarkCampaignAsSent(ctx context.Context, id uuid.UUID) (Campaign, error)
	MarkEmailAsDelivered(ctx context.Context, recipientEmail string) error
	MarkNotificationAsRead(ctx context.Context, userID uuid.UUID) error
	MarkUserForDeletion(ctx context.Context, arg MarkUserForDeletionParams) (User, error)
	PlanExists(ctx context.Context, name string) (bool, error)
	// Soft deletes a contact from a group by setting the deleted_at timestamp
	RemoveContactFromGroup(ctx context.Context, arg RemoveContactFromGroupParams) error
	ResetUserPassword(ctx context.Context, arg ResetUserPasswordParams) error
	// Restores a soft-deleted contact group
	RestoreContactGroup(ctx context.Context, id uuid.UUID) error
	// Searches contact groups by name or description
	SearchContactGroups(ctx context.Context, arg SearchContactGroupsParams) ([]ContactGroup, error)
	SoftDeleteAdmin(ctx context.Context, id uuid.UUID) error
	SoftDeleteCampaign(ctx context.Context, arg SoftDeleteCampaignParams) error
	SoftDeleteCompany(ctx context.Context, id uuid.UUID) error
	// Soft deletes a contact group
	SoftDeleteContactGroup(ctx context.Context, arg SoftDeleteContactGroupParams) error
	SoftDeleteDomain(ctx context.Context, arg SoftDeleteDomainParams) error
	SoftDeleteEmailCampaignResult(ctx context.Context, arg SoftDeleteEmailCampaignResultParams) error
	SoftDeletePlan(ctx context.Context, id uuid.UUID) error
	SoftDeleteSMTPKey(ctx context.Context, id uuid.UUID) error
	SoftDeleteSender(ctx context.Context, arg SoftDeleteSenderParams) error
	SoftDeleteTemplate(ctx context.Context, arg SoftDeleteTemplateParams) error
	SoftDeleteUser(ctx context.Context, id uuid.UUID) error
	UnblockUser(ctx context.Context, id uuid.UUID) (UnblockUserRow, error)
	UpdateAdmin(ctx context.Context, arg UpdateAdminParams) (Admin, error)
	UpdateBounceStatus(ctx context.Context, arg UpdateBounceStatusParams) error
	UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) (Campaign, error)
	UpdateCampaignGroup(ctx context.Context, arg UpdateCampaignGroupParams) error
	UpdateCampaignStatus(ctx context.Context, arg UpdateCampaignStatusParams) error
	UpdateCompanyName(ctx context.Context, arg UpdateCompanyNameParams) error
	UpdateContact(ctx context.Context, arg UpdateContactParams) error
	// Updates a contact group's details
	UpdateContactGroup(ctx context.Context, arg UpdateContactGroupParams) (ContactGroup, error)
	UpdateContactSubscription(ctx context.Context, arg UpdateContactSubscriptionParams) error
	UpdateDomain(ctx context.Context, arg UpdateDomainParams) error
	UpdateEmailBounced(ctx context.Context, arg UpdateEmailBouncedParams) (EmailCampaignResult, error)
	UpdateEmailCampaignResult(ctx context.Context, arg UpdateEmailCampaignResultParams) (EmailCampaignResult, error)
	UpdateEmailClicked(ctx context.Context, arg UpdateEmailClickedParams) (EmailCampaignResult, error)
	UpdateEmailComplaint(ctx context.Context, arg UpdateEmailComplaintParams) (EmailCampaignResult, error)
	UpdateEmailConversion(ctx context.Context, arg UpdateEmailConversionParams) (EmailCampaignResult, error)
	UpdateEmailOpened(ctx context.Context, arg UpdateEmailOpenedParams) (EmailCampaignResult, error)
	UpdateEmailUnsubscribed(ctx context.Context, arg UpdateEmailUnsubscribedParams) (EmailCampaignResult, error)
	UpdateEmailsSentAndRemaining(ctx context.Context, arg UpdateEmailsSentAndRemainingParams) (EmailUsage, error)
	UpdateInvitationStatus(ctx context.Context, arg UpdateInvitationStatusParams) (Invitation, error)
	UpdateMailingLimit(ctx context.Context, arg UpdateMailingLimitParams) (MailingLimit, error)
	UpdatePaymentHash(ctx context.Context, arg UpdatePaymentHashParams) error
	UpdatePaymentIntent(ctx context.Context, arg UpdatePaymentIntentParams) (PaymentIntent, error)
	UpdatePaymentIntentError(ctx context.Context, arg UpdatePaymentIntentErrorParams) (PaymentIntent, error)
	UpdatePlan(ctx context.Context, arg UpdatePlanParams) (Plan, error)
	UpdatePlanFeature(ctx context.Context, arg UpdatePlanFeatureParams) (PlanFeature, error)
	UpdateSMTPKeyLogin(ctx context.Context, arg UpdateSMTPKeyLoginParams) error
	UpdateSMTPKeyMasterPasswordAndLogin(ctx context.Context, arg UpdateSMTPKeyMasterPasswordAndLoginParams) error
	UpdateSMTPKeyStatus(ctx context.Context, arg UpdateSMTPKeyStatusParams) error
	UpdateSender(ctx context.Context, arg UpdateSenderParams) (Sender, error)
	UpdateSenderVerified(ctx context.Context, arg UpdateSenderVerifiedParams) error
	UpdateSubscriptionStatus(ctx context.Context, arg UpdateSubscriptionStatusParams) (Subscription, error)
	UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) (Template, error)
	UpdateTicketStatus(ctx context.Context, arg UpdateTicketStatusParams) (SupportTicket, error)
	UpdateUserLoginTime(ctx context.Context, id uuid.UUID) error
	UpdateUserRecords(ctx context.Context, arg UpdateUserRecordsParams) error
	UpsertAdmin(ctx context.Context, arg UpsertAdminParams) (Admin, error)
	VerifyUser(ctx context.Context, id uuid.UUID) error
}

var _ Querier = (*Queries)(nil)
