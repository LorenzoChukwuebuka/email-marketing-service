// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: system_smtp_settings.sql

package db

import (
	"context"
	"database/sql"
)

const createSystemsSMTPSettings = `-- name: CreateSystemsSMTPSettings :one
INSERT INTO
    systems_smtp_settings (
        txt_record,
        dmarc_record,
        dkim_selector,
        dkim_public_key,
        dkim_private_key,
        spf_record,
        verified,
        mx_record,
        domain
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9
    ) RETURNING id, created_at, updated_at, deleted_at, txt_record, dmarc_record, dkim_selector, dkim_public_key, dkim_private_key, spf_record, verified, mx_record, domain
`

type CreateSystemsSMTPSettingsParams struct {
	TxtRecord      sql.NullString `json:"txt_record"`
	DmarcRecord    sql.NullString `json:"dmarc_record"`
	DkimSelector   sql.NullString `json:"dkim_selector"`
	DkimPublicKey  sql.NullString `json:"dkim_public_key"`
	DkimPrivateKey sql.NullString `json:"dkim_private_key"`
	SpfRecord      sql.NullString `json:"spf_record"`
	Verified       sql.NullBool   `json:"verified"`
	MxRecord       sql.NullString `json:"mx_record"`
	Domain         sql.NullString `json:"domain"`
}

func (q *Queries) CreateSystemsSMTPSettings(ctx context.Context, arg CreateSystemsSMTPSettingsParams) (SystemsSmtpSetting, error) {
	row := q.db.QueryRowContext(ctx, createSystemsSMTPSettings,
		arg.TxtRecord,
		arg.DmarcRecord,
		arg.DkimSelector,
		arg.DkimPublicKey,
		arg.DkimPrivateKey,
		arg.SpfRecord,
		arg.Verified,
		arg.MxRecord,
		arg.Domain,
	)
	var i SystemsSmtpSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TxtRecord,
		&i.DmarcRecord,
		&i.DkimSelector,
		&i.DkimPublicKey,
		&i.DkimPrivateKey,
		&i.SpfRecord,
		&i.Verified,
		&i.MxRecord,
		&i.Domain,
	)
	return i, err
}

const deleteSystemsSMTPSetting = `-- name: DeleteSystemsSMTPSetting :exec
DELETE FROM systems_smtp_settings WHERE domain = $1
`

func (q *Queries) DeleteSystemsSMTPSetting(ctx context.Context, domain sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteSystemsSMTPSetting, domain)
	return err
}

const getSMTPSettingByDomain = `-- name: GetSMTPSettingByDomain :one
SELECT id, created_at, updated_at, deleted_at, txt_record, dmarc_record, dkim_selector, dkim_public_key, dkim_private_key, spf_record, verified, mx_record, domain FROM systems_smtp_settings
WHERE domain = $1
`

func (q *Queries) GetSMTPSettingByDomain(ctx context.Context, domain sql.NullString) (SystemsSmtpSetting, error) {
	row := q.db.QueryRowContext(ctx, getSMTPSettingByDomain, domain)
	var i SystemsSmtpSetting
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TxtRecord,
		&i.DmarcRecord,
		&i.DkimSelector,
		&i.DkimPublicKey,
		&i.DkimPrivateKey,
		&i.SpfRecord,
		&i.Verified,
		&i.MxRecord,
		&i.Domain,
	)
	return i, err
}
