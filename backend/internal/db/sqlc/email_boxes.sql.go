// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_boxes.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEmailBox = `-- name: CreateEmailBox :one
INSERT INTO
    email_boxes (
        user_name,
        "from",
        "to",
        content,
        mailbox
    )
VALUES ($1, $2, $3, $4, $5) RETURNING id, user_name, "from", "to", content, mailbox, created_at, updated_at, deleted_at
`

type CreateEmailBoxParams struct {
	UserName sql.NullString `json:"user_name"`
	From     sql.NullString `json:"from"`
	To       sql.NullString `json:"to"`
	Content  []byte         `json:"content"`
	Mailbox  sql.NullString `json:"mailbox"`
}

func (q *Queries) CreateEmailBox(ctx context.Context, arg CreateEmailBoxParams) (EmailBox, error) {
	row := q.db.QueryRowContext(ctx, createEmailBox,
		arg.UserName,
		arg.From,
		arg.To,
		arg.Content,
		arg.Mailbox,
	)
	var i EmailBox
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.From,
		&i.To,
		&i.Content,
		&i.Mailbox,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getEmailBoxByID = `-- name: GetEmailBoxByID :one
SELECT id, user_name, "from", "to", content, mailbox, created_at, updated_at, deleted_at
FROM email_boxes
WHERE
    id = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetEmailBoxByID(ctx context.Context, id uuid.UUID) (EmailBox, error) {
	row := q.db.QueryRowContext(ctx, getEmailBoxByID, id)
	var i EmailBox
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.From,
		&i.To,
		&i.Content,
		&i.Mailbox,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listEmailBoxesByMailbox = `-- name: ListEmailBoxesByMailbox :many
SELECT id, user_name, "from", "to", content, mailbox, created_at, updated_at, deleted_at
FROM email_boxes
WHERE
    user_name = $1
    AND mailbox = $2
    AND deleted_at IS NULL
ORDER BY created_at DESC
`

type ListEmailBoxesByMailboxParams struct {
	UserName sql.NullString `json:"user_name"`
	Mailbox  sql.NullString `json:"mailbox"`
}

func (q *Queries) ListEmailBoxesByMailbox(ctx context.Context, arg ListEmailBoxesByMailboxParams) ([]EmailBox, error) {
	rows, err := q.db.QueryContext(ctx, listEmailBoxesByMailbox, arg.UserName, arg.Mailbox)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmailBox{}
	for rows.Next() {
		var i EmailBox
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.From,
			&i.To,
			&i.Content,
			&i.Mailbox,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmailBoxesByUser = `-- name: ListEmailBoxesByUser :many
SELECT id, user_name, "from", "to", content, mailbox, created_at, updated_at, deleted_at
FROM email_boxes
WHERE
    user_name = $1
    AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListEmailBoxesByUser(ctx context.Context, userName sql.NullString) ([]EmailBox, error) {
	rows, err := q.db.QueryContext(ctx, listEmailBoxesByUser, userName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmailBox{}
	for rows.Next() {
		var i EmailBox
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.From,
			&i.To,
			&i.Content,
			&i.Mailbox,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
