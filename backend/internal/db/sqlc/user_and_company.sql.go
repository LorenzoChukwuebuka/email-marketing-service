// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_and_company.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const blockUser = `-- name: BlockUser :exec
UPDATE users SET blocked = TRUE, updated_at = now() WHERE id = $1
`

func (q *Queries) BlockUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, blockUser, id)
	return err
}

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (companyname) VALUES ($1) RETURNING id, companyname, created_at, updated_at, deleted_at
`

func (q *Queries) CreateCompany(ctx context.Context, companyname sql.NullString) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany, companyname)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Companyname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        fullname,
        company_id,
        email,
        phonenumber,
        password,
        google_id,
        verified,
        verified_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8
    ) RETURNING id, fullname, company_id, email, phonenumber, password, google_id, picture, verified, blocked, verified_at, status, scheduled_for_deletion, scheduled_deletion_at, last_login_at, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Fullname    string         `json:"fullname"`
	CompanyID   uuid.UUID      `json:"company_id"`
	Email       string         `json:"email"`
	Phonenumber sql.NullString `json:"phonenumber"`
	Password    sql.NullString `json:"password"`
	GoogleID    sql.NullString `json:"google_id"`
	Verified    bool           `json:"verified"`
	VerifiedAt  sql.NullTime   `json:"verified_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Fullname,
		arg.CompanyID,
		arg.Email,
		arg.Phonenumber,
		arg.Password,
		arg.GoogleID,
		arg.Verified,
		arg.VerifiedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.CompanyID,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.GoogleID,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, companyname, created_at, updated_at, deleted_at FROM companies WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCompanyByID(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Companyname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    u.id, u.fullname, u.company_id, u.email, u.phonenumber, u.password, u.google_id, u.picture, u.verified, u.blocked, u.verified_at, u.status, u.scheduled_for_deletion, u.scheduled_deletion_at, u.last_login_at, u.created_at, u.updated_at, u.deleted_at,
    c.id AS company_id,
    c.companyname,
    c.created_at AS company_created_at,
    c.updated_at AS company_updated_at,
    c.deleted_at AS company_deleted_at
FROM 
    users u
JOIN 
    companies c ON u.company_id = c.id
WHERE 
    u.email = $1 
    AND u.deleted_at IS NULL
    AND c.deleted_at IS NULL
`

type GetUserByEmailRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	CompanyID            uuid.UUID      `json:"company_id"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Password             sql.NullString `json:"password"`
	GoogleID             sql.NullString `json:"google_id"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	DeletedAt            sql.NullTime   `json:"deleted_at"`
	CompanyID_2          uuid.UUID      `json:"company_id_2"`
	Companyname          sql.NullString `json:"companyname"`
	CompanyCreatedAt     time.Time      `json:"company_created_at"`
	CompanyUpdatedAt     time.Time      `json:"company_updated_at"`
	CompanyDeletedAt     sql.NullTime   `json:"company_deleted_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.CompanyID,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.GoogleID,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CompanyID_2,
		&i.Companyname,
		&i.CompanyCreatedAt,
		&i.CompanyUpdatedAt,
		&i.CompanyDeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
    u.id, u.fullname, u.company_id, u.email, u.phonenumber, u.password, u.google_id, u.picture, u.verified, u.blocked, u.verified_at, u.status, u.scheduled_for_deletion, u.scheduled_deletion_at, u.last_login_at, u.created_at, u.updated_at, u.deleted_at,
    c.id AS company_id,
    c.companyname,
    c.created_at AS company_created_at,
    c.updated_at AS company_updated_at,
    c.deleted_at AS company_deleted_at
FROM 
    users u
JOIN 
    companies c ON u.company_id = c.id
WHERE 
    u.id = $1 
    AND u.deleted_at IS NULL
    AND c.deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	CompanyID            uuid.UUID      `json:"company_id"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Password             sql.NullString `json:"password"`
	GoogleID             sql.NullString `json:"google_id"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	DeletedAt            sql.NullTime   `json:"deleted_at"`
	CompanyID_2          uuid.UUID      `json:"company_id_2"`
	Companyname          sql.NullString `json:"companyname"`
	CompanyCreatedAt     time.Time      `json:"company_created_at"`
	CompanyUpdatedAt     time.Time      `json:"company_updated_at"`
	CompanyDeletedAt     sql.NullTime   `json:"company_deleted_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.CompanyID,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.GoogleID,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CompanyID_2,
		&i.Companyname,
		&i.CompanyCreatedAt,
		&i.CompanyUpdatedAt,
		&i.CompanyDeletedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, companyname, created_at, updated_at, deleted_at
FROM companies
WHERE
    deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Companyname,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByCompany = `-- name: ListUsersByCompany :many
SELECT id, fullname, company_id, email, phonenumber, password, google_id, picture, verified, blocked, verified_at, status, scheduled_for_deletion, scheduled_deletion_at, last_login_at, created_at, updated_at, deleted_at
FROM users
WHERE
    company_id = $1
    AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListUsersByCompany(ctx context.Context, companyID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.CompanyID,
			&i.Email,
			&i.Phonenumber,
			&i.Password,
			&i.GoogleID,
			&i.Picture,
			&i.Verified,
			&i.Blocked,
			&i.VerifiedAt,
			&i.Status,
			&i.ScheduledForDeletion,
			&i.ScheduledDeletionAt,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetUserPassword = `-- name: ResetUserPassword :exec
UPDATE users SET password = $1, updated_at = now() WHERE id = $2
`

type ResetUserPasswordParams struct {
	Password sql.NullString `json:"password"`
	ID       uuid.UUID      `json:"id"`
}

func (q *Queries) ResetUserPassword(ctx context.Context, arg ResetUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, resetUserPassword, arg.Password, arg.ID)
	return err
}

const softDeleteCompany = `-- name: SoftDeleteCompany :exec
UPDATE companies SET deleted_at = now() WHERE id = $1
`

func (q *Queries) SoftDeleteCompany(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteCompany, id)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET deleted_at = now() WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteUser, id)
	return err
}

const updateUserLoginTime = `-- name: UpdateUserLoginTime :exec
UPDATE users
SET
    last_login_at = now(),
    updated_at = now()
WHERE
    id = $1
`

func (q *Queries) UpdateUserLoginTime(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateUserLoginTime, id)
	return err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users
SET
    verified = TRUE,
    verified_at = now(),
    updated_at = now()
WHERE
    id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, verifyUser, id)
	return err
}
