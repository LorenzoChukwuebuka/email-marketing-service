// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_and_company.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const blockUser = `-- name: BlockUser :exec
UPDATE users SET blocked = TRUE, updated_at = now() WHERE id = $1
`

func (q *Queries) BlockUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, blockUser, id)
	return err
}

const cancelUserDeletion = `-- name: CancelUserDeletion :one
UPDATE users
SET
    scheduled_for_deletion = FALSE,
    scheduled_deletion_at = NULL,
    updated_at = now()
WHERE
    id = $1 RETURNING id, fullname, company_id, email, phonenumber, password, google_id, picture, verified, blocked, verified_at, status, scheduled_for_deletion, scheduled_deletion_at, last_login_at, created_at, updated_at, deleted_at
`

func (q *Queries) CancelUserDeletion(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, cancelUserDeletion, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.CompanyID,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.GoogleID,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const countAllUsers = `-- name: CountAllUsers :one
SELECT COUNT(*) FROM users u WHERE u.deleted_at IS NULL
`

func (q *Queries) CountAllUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUnVerifiedUsers = `-- name: CountUnVerifiedUsers :one
SELECT COUNT(*)
FROM users u
WHERE
    u.deleted_at IS NULL
    AND u.verified = false
`

func (q *Queries) CountUnVerifiedUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUnVerifiedUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserCampaigns = `-- name: CountUserCampaigns :one
SELECT COUNT(*)
FROM campaigns
WHERE
    user_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) CountUserCampaigns(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserCampaigns, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserCampaignsSent = `-- name: CountUserCampaignsSent :one
SELECT COUNT(*)
FROM campaigns
WHERE
    user_id = $1
    AND status = 'SENT'
    AND deleted_at IS NULL
`

func (q *Queries) CountUserCampaignsSent(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserCampaignsSent, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserContacts = `-- name: CountUserContacts :one

SELECT COUNT(*)
FROM contacts
WHERE
    user_id = $1
    AND deleted_at IS NULL
`

// - Counts for user stats  ---
func (q *Queries) CountUserContacts(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserContacts, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserGroups = `-- name: CountUserGroups :one
SELECT COUNT(*)
FROM contact_groups
WHERE
    user_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) CountUserGroups(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserGroups, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserTemplates = `-- name: CountUserTemplates :one
SELECT COUNT(*)
FROM templates
WHERE
    user_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) CountUserTemplates(ctx context.Context, userID uuid.NullUUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserTemplates, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countVerifiedUsers = `-- name: CountVerifiedUsers :one
SELECT COUNT(*)
FROM users u
WHERE
    u.deleted_at IS NULL
    AND u.verified = true
`

func (q *Queries) CountVerifiedUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countVerifiedUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (companyname) VALUES ($1) RETURNING id, companyname, created_at, updated_at, deleted_at
`

func (q *Queries) CreateCompany(ctx context.Context, companyname sql.NullString) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany, companyname)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Companyname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        fullname,
        company_id,
        email,
        phonenumber,
        password,
        google_id,
        verified,
        verified_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8
    ) RETURNING id, fullname, company_id, email, phonenumber, password, google_id, picture, verified, blocked, verified_at, status, scheduled_for_deletion, scheduled_deletion_at, last_login_at, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Fullname    string         `json:"fullname"`
	CompanyID   uuid.UUID      `json:"company_id"`
	Email       string         `json:"email"`
	Phonenumber sql.NullString `json:"phonenumber"`
	Password    sql.NullString `json:"password"`
	GoogleID    sql.NullString `json:"google_id"`
	Verified    bool           `json:"verified"`
	VerifiedAt  sql.NullTime   `json:"verified_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Fullname,
		arg.CompanyID,
		arg.Email,
		arg.Phonenumber,
		arg.Password,
		arg.GoogleID,
		arg.Verified,
		arg.VerifiedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.CompanyID,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.GoogleID,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteScheduledUsers = `-- name: DeleteScheduledUsers :many
UPDATE users
SET
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE
    scheduled_for_deletion = TRUE
    AND deleted_at IS NULL
    AND scheduled_deletion_at IS NOT NULL
    AND scheduled_deletion_at < CURRENT_TIMESTAMP - INTERVAL '30 days' RETURNING id, fullname, company_id, email, phonenumber, password, google_id, picture, verified, blocked, verified_at, status, scheduled_for_deletion, scheduled_deletion_at, last_login_at, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteScheduledUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, deleteScheduledUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.CompanyID,
			&i.Email,
			&i.Phonenumber,
			&i.Password,
			&i.GoogleID,
			&i.Picture,
			&i.Verified,
			&i.Blocked,
			&i.VerifiedAt,
			&i.Status,
			&i.ScheduledForDeletion,
			&i.ScheduledDeletionAt,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT 
    u.id,
    u.fullname,
    u.email,
    u.phonenumber,
    u.picture,
    u.verified,
    u.blocked,
    u.verified_at,
    u.status,
    u.scheduled_for_deletion,
    u.scheduled_deletion_at,
    u.last_login_at,
    u.created_at,
    u.updated_at,
    c.id as company_id,
    c.companyname
FROM users u
LEFT JOIN companies c ON u.company_id = c.id
WHERE u.deleted_at IS NULL
    AND c.deleted_at IS NULL
    AND ($1::text = '' OR u.fullname ILIKE '%' || $1 || '%' OR u.email ILIKE '%' || $1 || '%' OR c.companyname ILIKE '%' || $1 || '%')
ORDER BY u.created_at DESC
LIMIT $2 OFFSET $3
`

type GetAllUsersParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetAllUsersRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	CompanyID            uuid.NullUUID  `json:"company_id"`
	Companyname          sql.NullString `json:"companyname"`
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Email,
			&i.Phonenumber,
			&i.Picture,
			&i.Verified,
			&i.Blocked,
			&i.VerifiedAt,
			&i.Status,
			&i.ScheduledForDeletion,
			&i.ScheduledDeletionAt,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompanyID,
			&i.Companyname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllVerifiedUserEmails = `-- name: GetAllVerifiedUserEmails :many
SELECT id, fullname, email FROM users WHERE verified = true
`

type GetAllVerifiedUserEmailsRow struct {
	ID       uuid.UUID `json:"id"`
	Fullname string    `json:"fullname"`
	Email    string    `json:"email"`
}

func (q *Queries) GetAllVerifiedUserEmails(ctx context.Context) ([]GetAllVerifiedUserEmailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllVerifiedUserEmails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllVerifiedUserEmailsRow{}
	for rows.Next() {
		var i GetAllVerifiedUserEmailsRow
		if err := rows.Scan(&i.ID, &i.Fullname, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, companyname, created_at, updated_at, deleted_at FROM companies WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetCompanyByID(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Companyname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSingleUser = `-- name: GetSingleUser :one
SELECT
    u.id,
    u.fullname,
    u.email,
    u.phonenumber,
    u.picture,
    u.verified,
    u.blocked,
    u.verified_at,
    u.status,
    u.scheduled_for_deletion,
    u.scheduled_deletion_at,
    u.last_login_at,
    u.created_at,
    u.updated_at,
    c.id as company_id,
    c.companyname
FROM users u
    LEFT JOIN companies c ON u.company_id = c.id
WHERE
    u.id = $1
    AND u.deleted_at IS NULL
    AND c.deleted_at IS NULL
`

type GetSingleUserRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	CompanyID            uuid.NullUUID  `json:"company_id"`
	Companyname          sql.NullString `json:"companyname"`
}

func (q *Queries) GetSingleUser(ctx context.Context, id uuid.UUID) (GetSingleUserRow, error) {
	row := q.db.QueryRowContext(ctx, getSingleUser, id)
	var i GetSingleUserRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.Phonenumber,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompanyID,
		&i.Companyname,
	)
	return i, err
}

const getUnVerifiedUsers = `-- name: GetUnVerifiedUsers :many
SELECT 
    u.id,
    u.fullname,
    u.email,
    u.phonenumber,
    u.picture,
    u.verified,
    u.blocked,
    u.verified_at,
    u.status,
    u.scheduled_for_deletion,
    u.scheduled_deletion_at,
    u.last_login_at,
    u.created_at,
    u.updated_at,
    c.id as company_id,
    c.companyname
FROM users u
LEFT JOIN companies c ON u.company_id = c.id
WHERE u.deleted_at IS NULL
    AND c.deleted_at IS NULL
    AND u.verified = false
    AND ($1::text = '' OR u.fullname ILIKE '%' || $1 || '%' OR u.email ILIKE '%' || $1 || '%' OR c.companyname ILIKE '%' || $1 || '%')
ORDER BY u.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUnVerifiedUsersParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetUnVerifiedUsersRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	CompanyID            uuid.NullUUID  `json:"company_id"`
	Companyname          sql.NullString `json:"companyname"`
}

func (q *Queries) GetUnVerifiedUsers(ctx context.Context, arg GetUnVerifiedUsersParams) ([]GetUnVerifiedUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnVerifiedUsers, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUnVerifiedUsersRow{}
	for rows.Next() {
		var i GetUnVerifiedUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Email,
			&i.Phonenumber,
			&i.Picture,
			&i.Verified,
			&i.Blocked,
			&i.VerifiedAt,
			&i.Status,
			&i.ScheduledForDeletion,
			&i.ScheduledDeletionAt,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompanyID,
			&i.Companyname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    u.id, u.fullname, u.company_id, u.email, u.phonenumber, u.password, u.google_id, u.picture, u.verified, u.blocked, u.verified_at, u.status, u.scheduled_for_deletion, u.scheduled_deletion_at, u.last_login_at, u.created_at, u.updated_at, u.deleted_at,
    c.id AS company_id,
    c.companyname,
    c.created_at AS company_created_at,
    c.updated_at AS company_updated_at,
    c.deleted_at AS company_deleted_at
FROM users u
    JOIN companies c ON u.company_id = c.id
WHERE
    u.email = $1
    AND u.deleted_at IS NULL
    AND c.deleted_at IS NULL
`

type GetUserByEmailRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	CompanyID            uuid.UUID      `json:"company_id"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Password             sql.NullString `json:"password"`
	GoogleID             sql.NullString `json:"google_id"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	DeletedAt            sql.NullTime   `json:"deleted_at"`
	CompanyID_2          uuid.UUID      `json:"company_id_2"`
	Companyname          sql.NullString `json:"companyname"`
	CompanyCreatedAt     time.Time      `json:"company_created_at"`
	CompanyUpdatedAt     time.Time      `json:"company_updated_at"`
	CompanyDeletedAt     sql.NullTime   `json:"company_deleted_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.CompanyID,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.GoogleID,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CompanyID_2,
		&i.Companyname,
		&i.CompanyCreatedAt,
		&i.CompanyUpdatedAt,
		&i.CompanyDeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    u.id, u.fullname, u.company_id, u.email, u.phonenumber, u.password, u.google_id, u.picture, u.verified, u.blocked, u.verified_at, u.status, u.scheduled_for_deletion, u.scheduled_deletion_at, u.last_login_at, u.created_at, u.updated_at, u.deleted_at,
    c.id AS company_id,
    c.companyname,
    c.created_at AS company_created_at,
    c.updated_at AS company_updated_at,
    c.deleted_at AS company_deleted_at
FROM users u
    JOIN companies c ON u.company_id = c.id
WHERE
    u.id = $1
    AND u.deleted_at IS NULL
    AND c.deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	CompanyID            uuid.UUID      `json:"company_id"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Password             sql.NullString `json:"password"`
	GoogleID             sql.NullString `json:"google_id"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	DeletedAt            sql.NullTime   `json:"deleted_at"`
	CompanyID_2          uuid.UUID      `json:"company_id_2"`
	Companyname          sql.NullString `json:"companyname"`
	CompanyCreatedAt     time.Time      `json:"company_created_at"`
	CompanyUpdatedAt     time.Time      `json:"company_updated_at"`
	CompanyDeletedAt     sql.NullTime   `json:"company_deleted_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.CompanyID,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.GoogleID,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CompanyID_2,
		&i.Companyname,
		&i.CompanyCreatedAt,
		&i.CompanyUpdatedAt,
		&i.CompanyDeletedAt,
	)
	return i, err
}

const getVerifiedUsers = `-- name: GetVerifiedUsers :many
SELECT 
    u.id,
    u.fullname,
    u.email,
    u.phonenumber,
    u.picture,
    u.verified,
    u.blocked,
    u.verified_at,
    u.status,
    u.scheduled_for_deletion,
    u.scheduled_deletion_at,
    u.last_login_at,
    u.created_at,
    u.updated_at,
    c.id as company_id,
    c.companyname
FROM users u
LEFT JOIN companies c ON u.company_id = c.id
WHERE u.deleted_at IS NULL
    AND c.deleted_at IS NULL
    AND u.verified = true
    AND ($1::text = '' OR u.fullname ILIKE '%' || $1 || '%' OR u.email ILIKE '%' || $1 || '%' OR c.companyname ILIKE '%' || $1 || '%')
ORDER BY u.created_at DESC
LIMIT $2 OFFSET $3
`

type GetVerifiedUsersParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetVerifiedUsersRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	CompanyID            uuid.NullUUID  `json:"company_id"`
	Companyname          sql.NullString `json:"companyname"`
}

func (q *Queries) GetVerifiedUsers(ctx context.Context, arg GetVerifiedUsersParams) ([]GetVerifiedUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getVerifiedUsers, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVerifiedUsersRow{}
	for rows.Next() {
		var i GetVerifiedUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Email,
			&i.Phonenumber,
			&i.Picture,
			&i.Verified,
			&i.Blocked,
			&i.VerifiedAt,
			&i.Status,
			&i.ScheduledForDeletion,
			&i.ScheduledDeletionAt,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompanyID,
			&i.Companyname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, companyname, created_at, updated_at, deleted_at
FROM companies
WHERE
    deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Companyname,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByCompany = `-- name: ListUsersByCompany :many
SELECT id, fullname, company_id, email, phonenumber, password, google_id, picture, verified, blocked, verified_at, status, scheduled_for_deletion, scheduled_deletion_at, last_login_at, created_at, updated_at, deleted_at
FROM users
WHERE
    company_id = $1
    AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListUsersByCompany(ctx context.Context, companyID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.CompanyID,
			&i.Email,
			&i.Phonenumber,
			&i.Password,
			&i.GoogleID,
			&i.Picture,
			&i.Verified,
			&i.Blocked,
			&i.VerifiedAt,
			&i.Status,
			&i.ScheduledForDeletion,
			&i.ScheduledDeletionAt,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markUserForDeletion = `-- name: MarkUserForDeletion :one
UPDATE users
SET
    scheduled_for_deletion = TRUE,
    scheduled_deletion_at = $2,
    status = $3,
    updated_at = now()
WHERE
    id = $1 RETURNING id, fullname, company_id, email, phonenumber, password, google_id, picture, verified, blocked, verified_at, status, scheduled_for_deletion, scheduled_deletion_at, last_login_at, created_at, updated_at, deleted_at
`

type MarkUserForDeletionParams struct {
	ID                  uuid.UUID    `json:"id"`
	ScheduledDeletionAt sql.NullTime `json:"scheduled_deletion_at"`
	Status              string       `json:"status"`
}

func (q *Queries) MarkUserForDeletion(ctx context.Context, arg MarkUserForDeletionParams) (User, error) {
	row := q.db.QueryRowContext(ctx, markUserForDeletion, arg.ID, arg.ScheduledDeletionAt, arg.Status)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.CompanyID,
		&i.Email,
		&i.Phonenumber,
		&i.Password,
		&i.GoogleID,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const resetUserPassword = `-- name: ResetUserPassword :exec
UPDATE users SET password = $1, updated_at = now() WHERE id = $2
`

type ResetUserPasswordParams struct {
	Password sql.NullString `json:"password"`
	ID       uuid.UUID      `json:"id"`
}

func (q *Queries) ResetUserPassword(ctx context.Context, arg ResetUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, resetUserPassword, arg.Password, arg.ID)
	return err
}

const softDeleteCompany = `-- name: SoftDeleteCompany :exec
UPDATE companies SET deleted_at = now() WHERE id = $1
`

func (q *Queries) SoftDeleteCompany(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteCompany, id)
	return err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users SET deleted_at = now() WHERE id = $1
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteUser, id)
	return err
}

const unblockUser = `-- name: UnblockUser :one
UPDATE users
SET
    blocked = false,
    updated_at = now()
WHERE
    id = $1
    AND deleted_at IS NULL RETURNING id,
    fullname,
    email,
    phonenumber,
    picture,
    verified,
    blocked,
    verified_at,
    status,
    scheduled_for_deletion,
    scheduled_deletion_at,
    last_login_at,
    created_at,
    updated_at,
    company_id
`

type UnblockUserRow struct {
	ID                   uuid.UUID      `json:"id"`
	Fullname             string         `json:"fullname"`
	Email                string         `json:"email"`
	Phonenumber          sql.NullString `json:"phonenumber"`
	Picture              sql.NullString `json:"picture"`
	Verified             bool           `json:"verified"`
	Blocked              bool           `json:"blocked"`
	VerifiedAt           sql.NullTime   `json:"verified_at"`
	Status               string         `json:"status"`
	ScheduledForDeletion bool           `json:"scheduled_for_deletion"`
	ScheduledDeletionAt  sql.NullTime   `json:"scheduled_deletion_at"`
	LastLoginAt          sql.NullTime   `json:"last_login_at"`
	CreatedAt            time.Time      `json:"created_at"`
	UpdatedAt            time.Time      `json:"updated_at"`
	CompanyID            uuid.UUID      `json:"company_id"`
}

func (q *Queries) UnblockUser(ctx context.Context, id uuid.UUID) (UnblockUserRow, error) {
	row := q.db.QueryRowContext(ctx, unblockUser, id)
	var i UnblockUserRow
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Email,
		&i.Phonenumber,
		&i.Picture,
		&i.Verified,
		&i.Blocked,
		&i.VerifiedAt,
		&i.Status,
		&i.ScheduledForDeletion,
		&i.ScheduledDeletionAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompanyID,
	)
	return i, err
}

const updateCompanyName = `-- name: UpdateCompanyName :exec
UPDATE companies
SET
    companyname = COALESCE($2, companyname),
    updated_at = now()
WHERE
    id = $1
`

type UpdateCompanyNameParams struct {
	ID          uuid.UUID      `json:"id"`
	Companyname sql.NullString `json:"companyname"`
}

func (q *Queries) UpdateCompanyName(ctx context.Context, arg UpdateCompanyNameParams) error {
	_, err := q.db.ExecContext(ctx, updateCompanyName, arg.ID, arg.Companyname)
	return err
}

const updateUserLoginTime = `-- name: UpdateUserLoginTime :exec
UPDATE users
SET
    last_login_at = now(),
    updated_at = now()
WHERE
    id = $1
`

func (q *Queries) UpdateUserLoginTime(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateUserLoginTime, id)
	return err
}

const updateUserRecords = `-- name: UpdateUserRecords :exec
UPDATE users
SET
    fullname = COALESCE(
        $2,
        fullname
    ),
    email = COALESCE($3, email),
    phonenumber = COALESCE(
        $4,
        phonenumber
    ),
    updated_at = now()
WHERE
    id = $1
`

type UpdateUserRecordsParams struct {
	ID          uuid.UUID      `json:"id"`
	Fullname    sql.NullString `json:"fullname"`
	Email       sql.NullString `json:"email"`
	Phonenumber sql.NullString `json:"phonenumber"`
}

func (q *Queries) UpdateUserRecords(ctx context.Context, arg UpdateUserRecordsParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRecords,
		arg.ID,
		arg.Fullname,
		arg.Email,
		arg.Phonenumber,
	)
	return err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users
SET
    verified = TRUE,
    verified_at = now(),
    updated_at = now()
WHERE
    id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, verifyUser, id)
	return err
}
