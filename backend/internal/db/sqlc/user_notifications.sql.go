// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_notifications.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserNotification = `-- name: CreateUserNotification :one
INSERT INTO
    user_notifications (
        user_id,
        title,
        additional_field
    )
VALUES ($1, $2, $3) RETURNING id, user_id, title, read_status, additional_field, created_at, updated_at
`

type CreateUserNotificationParams struct {
	UserID          uuid.UUID `json:"user_id"`
	Title           string    `json:"title"`
	AdditionalField string    `json:"additional_field"`
}

func (q *Queries) CreateUserNotification(ctx context.Context, arg CreateUserNotificationParams) (UserNotification, error) {
	row := q.db.QueryRowContext(ctx, createUserNotification, arg.UserID, arg.Title, arg.AdditionalField)
	var i UserNotification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.ReadStatus,
		&i.AdditionalField,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserNotifications = `-- name: GetUserNotifications :many
SELECT id, user_id, title, read_status, additional_field, created_at, updated_at
FROM user_notifications
WHERE
    user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUserNotifications(ctx context.Context, userID uuid.UUID) ([]UserNotification, error) {
	rows, err := q.db.QueryContext(ctx, getUserNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserNotification{}
	for rows.Next() {
		var i UserNotification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.ReadStatus,
			&i.AdditionalField,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllUserNotificationsAsRead = `-- name: MarkAllUserNotificationsAsRead :exec
UPDATE user_notifications
SET
    read_status = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE
    user_id = $1
    AND read_status = FALSE
`

func (q *Queries) MarkAllUserNotificationsAsRead(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markAllUserNotificationsAsRead, userID)
	return err
}

const markNotificationAsRead = `-- name: MarkNotificationAsRead :exec
UPDATE user_notifications
SET
    read_status = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE
    user_id = $1
    AND id = $1
`

func (q *Queries) MarkNotificationAsRead(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markNotificationAsRead, userID)
	return err
}
