// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: audit_logs.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createAuditLog = `-- name: CreateAuditLog :exec
INSERT INTO audit_logs (
    user_id, action, resource, resource_id,
    method, endpoint, ip_address,
    success, request_body, changes
) VALUES (
    $1, $2, $3, $4,
    $5, $6, $7,
    $8, $9, $10
)
`

type CreateAuditLogParams struct {
	UserID      uuid.UUID             `json:"user_id"`
	Action      interface{}           `json:"action"`
	Resource    string                `json:"resource"`
	ResourceID  uuid.NullUUID         `json:"resource_id"`
	Method      sql.NullString        `json:"method"`
	Endpoint    sql.NullString        `json:"endpoint"`
	IpAddress   pqtype.Inet           `json:"ip_address"`
	Success     sql.NullBool          `json:"success"`
	RequestBody pqtype.NullRawMessage `json:"request_body"`
	Changes     pqtype.NullRawMessage `json:"changes"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error {
	_, err := q.db.ExecContext(ctx, createAuditLog,
		arg.UserID,
		arg.Action,
		arg.Resource,
		arg.ResourceID,
		arg.Method,
		arg.Endpoint,
		arg.IpAddress,
		arg.Success,
		arg.RequestBody,
		arg.Changes,
	)
	return err
}

const getAuditLogsByUser = `-- name: GetAuditLogsByUser :many
SELECT id, user_id, action, resource, resource_id, method, endpoint, ip_address, occurred_at, success, request_body, changes FROM audit_logs
WHERE user_id = $1
ORDER BY occurred_at DESC
LIMIT $2 OFFSET $3
`

type GetAuditLogsByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetAuditLogsByUser(ctx context.Context, arg GetAuditLogsByUserParams) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.Resource,
			&i.ResourceID,
			&i.Method,
			&i.Endpoint,
			&i.IpAddress,
			&i.OccurredAt,
			&i.Success,
			&i.RequestBody,
			&i.Changes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditLogsForResource = `-- name: GetAuditLogsForResource :many
SELECT id, user_id, action, resource, resource_id, method, endpoint, ip_address, occurred_at, success, request_body, changes FROM audit_logs
WHERE resource = $1 AND resource_id = $2
ORDER BY occurred_at DESC
LIMIT $3 OFFSET $4
`

type GetAuditLogsForResourceParams struct {
	Resource   string        `json:"resource"`
	ResourceID uuid.NullUUID `json:"resource_id"`
	Limit      int32         `json:"limit"`
	Offset     int32         `json:"offset"`
}

func (q *Queries) GetAuditLogsForResource(ctx context.Context, arg GetAuditLogsForResourceParams) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsForResource,
		arg.Resource,
		arg.ResourceID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.Resource,
			&i.ResourceID,
			&i.Method,
			&i.Endpoint,
			&i.IpAddress,
			&i.OccurredAt,
			&i.Success,
			&i.RequestBody,
			&i.Changes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
