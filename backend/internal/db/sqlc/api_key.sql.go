// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_key.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkIfAPIKeyExists = `-- name: CheckIfAPIKeyExists :one
SELECT id, user_id, company_id, name, api_key, created_at, updated_at, deleted_at FrOM api_keys WHERE api_key = $1 AND deleted_at IS NULL
`

func (q *Queries) CheckIfAPIKeyExists(ctx context.Context, apiKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, checkIfAPIKeyExists, apiKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.Name,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO
    api_keys (
        user_id,
        company_id,
        name,
        api_key
    )
VALUES ($1, $2, $3, $4) RETURNING id,
    user_id,
    company_id,
    name,
    api_key,
    created_at,
    updated_at
`

type CreateAPIKeyParams struct {
	UserID    uuid.UUID `json:"user_id"`
	CompanyID uuid.UUID `json:"company_id"`
	Name      string    `json:"name"`
	ApiKey    string    `json:"api_key"`
}

type CreateAPIKeyRow struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	CompanyID uuid.UUID `json:"company_id"`
	Name      string    `json:"name"`
	ApiKey    string    `json:"api_key"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (CreateAPIKeyRow, error) {
	row := q.db.QueryRowContext(ctx, createAPIKey,
		arg.UserID,
		arg.CompanyID,
		arg.Name,
		arg.ApiKey,
	)
	var i CreateAPIKeyRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.Name,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
UPDATE api_keys
SET
    deleted_at = now(),
    updated_at = now()
WHERE
    id = $1
    AND deleted_at IS NULL
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKey, id)
	return err
}

const findUserWithAPIKey = `-- name: FindUserWithAPIKey :one
SELECT
    u.id AS user_id,
    u.email,
    u.fullname,
    u.company_id,
    ak.company_id,
    ak.id AS api_key_id,
    ak.name AS api_key_name
FROM api_keys ak
    JOIN users u ON ak.user_id = u.id
WHERE
    ak.api_key = $1
    AND ak.deleted_at IS NULL
    AND u.deleted_at IS NULL
LIMIT 1
`

type FindUserWithAPIKeyRow struct {
	UserID      uuid.UUID `json:"user_id"`
	Email       string    `json:"email"`
	Fullname    string    `json:"fullname"`
	CompanyID   uuid.UUID `json:"company_id"`
	CompanyID_2 uuid.UUID `json:"company_id_2"`
	ApiKeyID    uuid.UUID `json:"api_key_id"`
	ApiKeyName  string    `json:"api_key_name"`
}

func (q *Queries) FindUserWithAPIKey(ctx context.Context, apiKey string) (FindUserWithAPIKeyRow, error) {
	row := q.db.QueryRowContext(ctx, findUserWithAPIKey, apiKey)
	var i FindUserWithAPIKeyRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Fullname,
		&i.CompanyID,
		&i.CompanyID_2,
		&i.ApiKeyID,
		&i.ApiKeyName,
	)
	return i, err
}

const getAPIKeysByCompanyID = `-- name: GetAPIKeysByCompanyID :many
SELECT
    id,
    user_id,
    company_id,
    name,
    api_key,
    created_at,
    updated_at
FROM api_keys
WHERE
    company_id = $1
    AND deleted_at IS NULL
ORDER BY created_at DESC
`

type GetAPIKeysByCompanyIDRow struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	CompanyID uuid.UUID `json:"company_id"`
	Name      string    `json:"name"`
	ApiKey    string    `json:"api_key"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetAPIKeysByCompanyID(ctx context.Context, companyID uuid.UUID) ([]GetAPIKeysByCompanyIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getAPIKeysByCompanyID, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAPIKeysByCompanyIDRow{}
	for rows.Next() {
		var i GetAPIKeysByCompanyIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.Name,
			&i.ApiKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAPIKeysByUserID = `-- name: GetAPIKeysByUserID :many
SELECT
    id,
    user_id,
    company_id,
    name,
    api_key,
    created_at,
    updated_at
FROM api_keys
WHERE
    user_id = $1
    AND deleted_at IS NULL
ORDER BY created_at DESC
`

type GetAPIKeysByUserIDRow struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	CompanyID uuid.UUID `json:"company_id"`
	Name      string    `json:"name"`
	ApiKey    string    `json:"api_key"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetAPIKeysByUserID(ctx context.Context, userID uuid.UUID) ([]GetAPIKeysByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getAPIKeysByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAPIKeysByUserIDRow{}
	for rows.Next() {
		var i GetAPIKeysByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.Name,
			&i.ApiKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
