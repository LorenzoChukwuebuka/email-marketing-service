// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admins.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO
    admins (
        firstname,
        middlename,
        lastname,
        email,
        password,
        type,
        created_at,
        updated_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        NOW(),
        NOW()
    ) RETURNING id, firstname, middlename, lastname, email, password, type, created_at, updated_at, deleted_at
`

type CreateAdminParams struct {
	Firstname  sql.NullString `json:"firstname"`
	Middlename sql.NullString `json:"middlename"`
	Lastname   sql.NullString `json:"lastname"`
	Email      string         `json:"email"`
	Password   string         `json:"password"`
	Type       string         `json:"type"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.Firstname,
		arg.Middlename,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.Type,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT id, firstname, middlename, lastname, email, password, type, created_at, updated_at, deleted_at FROM admins WHERE email = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAdminByID = `-- name: GetAdminByID :one
SELECT id, firstname, middlename, lastname, email, password, type, created_at, updated_at, deleted_at FROM admins WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetAdminByID(ctx context.Context, id uuid.UUID) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByID, id)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllAdmins = `-- name: GetAllAdmins :many
SELECT id, firstname, middlename, lastname, email, password, type, created_at, updated_at, deleted_at FROM admins ORDER BY created_at DESC
`

func (q *Queries) GetAllAdmins(ctx context.Context) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, getAllAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Admin{}
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Middlename,
			&i.Lastname,
			&i.Email,
			&i.Password,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAdmins = `-- name: ListAdmins :many
SELECT id, firstname, middlename, lastname, email, password, type, created_at, updated_at, deleted_at
FROM admins
WHERE
    deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListAdmins(ctx context.Context) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Admin{}
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Middlename,
			&i.Lastname,
			&i.Email,
			&i.Password,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteAdmin = `-- name: SoftDeleteAdmin :exec
UPDATE admins
SET
    deleted_at = NOW()
WHERE
    id = $1
    AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteAdmin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteAdmin, id)
	return err
}

const updateAdmin = `-- name: UpdateAdmin :one
UPDATE admins
SET
    firstname = COALESCE($1, first_name),
    middlename = COALESCE($2, middle_name),
    lastname = COALESCE($3, last_name),
    password = COALESCE($4, password),
    type = COALESCE($5, type),
    updated_at = NOW()
WHERE
    id = $6
    AND deleted_at IS NULL RETURNING id, firstname, middlename, lastname, email, password, type, created_at, updated_at, deleted_at
`

type UpdateAdminParams struct {
	Firstname  sql.NullString `json:"firstname"`
	Middlename sql.NullString `json:"middlename"`
	Lastname   sql.NullString `json:"lastname"`
	Password   string         `json:"password"`
	Type       string         `json:"type"`
	ID         uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, updateAdmin,
		arg.Firstname,
		arg.Middlename,
		arg.Lastname,
		arg.Password,
		arg.Type,
		arg.ID,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const upsertAdmin = `-- name: UpsertAdmin :one
INSERT INTO
    admins (
        firstname,
        middlename,
        lastname,
        email,
        password,
        type,
        created_at,
        updated_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        NOW(),
        NOW()
    ) ON CONFLICT (email) DO
UPDATE
SET
    firstname = EXCLUDED.first_name,
    middlename = EXCLUDED.middle_name,
    lastname = EXCLUDED.last_name,
    password = EXCLUDED.password,
    type = EXCLUDED.type,
    updatedat = NOW() RETURNING id, firstname, middlename, lastname, email, password, type, created_at, updated_at, deleted_at
`

type UpsertAdminParams struct {
	Firstname  sql.NullString `json:"firstname"`
	Middlename sql.NullString `json:"middlename"`
	Lastname   sql.NullString `json:"lastname"`
	Email      string         `json:"email"`
	Password   string         `json:"password"`
	Type       string         `json:"type"`
}

func (q *Queries) UpsertAdmin(ctx context.Context, arg UpsertAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, upsertAdmin,
		arg.Firstname,
		arg.Middlename,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.Type,
	)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
