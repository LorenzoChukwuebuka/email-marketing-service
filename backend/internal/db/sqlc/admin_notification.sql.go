// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin_notification.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAdminNotification = `-- name: CreateAdminNotification :one
INSERT INTO
    admin_notifications (user_id, title, link)
VALUES ($1, $2, $3) RETURNING id, user_id, title, link, read_status, created_at, updated_at
`

type CreateAdminNotificationParams struct {
	UserID uuid.UUID      `json:"user_id"`
	Title  string         `json:"title"`
	Link   sql.NullString `json:"link"`
}

func (q *Queries) CreateAdminNotification(ctx context.Context, arg CreateAdminNotificationParams) (AdminNotification, error) {
	row := q.db.QueryRowContext(ctx, createAdminNotification, arg.UserID, arg.Title, arg.Link)
	var i AdminNotification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Link,
		&i.ReadStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminNotifications = `-- name: GetAdminNotifications :many
SELECT id, user_id, title, link, read_status, created_at, updated_at
FROM admin_notifications
WHERE
    user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAdminNotifications(ctx context.Context, userID uuid.UUID) ([]AdminNotification, error) {
	rows, err := q.db.QueryContext(ctx, getAdminNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AdminNotification{}
	for rows.Next() {
		var i AdminNotification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Link,
			&i.ReadStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAdminNotificationAsRead = `-- name: MarkAdminNotificationAsRead :exec
UPDATE admin_notifications
SET
    read_status = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $1
`

func (q *Queries) MarkAdminNotificationAsRead(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markAdminNotificationAsRead, id)
	return err
}

const markAllAdminNotificationsAsRead = `-- name: MarkAllAdminNotificationsAsRead :exec
UPDATE admin_notifications
SET
    read_status = TRUE,
    updated_at = CURRENT_TIMESTAMP
WHERE
    user_id = $1
    AND read_status = FALSE
`

func (q *Queries) MarkAllAdminNotificationsAsRead(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markAllAdminNotificationsAsRead, userID)
	return err
}
