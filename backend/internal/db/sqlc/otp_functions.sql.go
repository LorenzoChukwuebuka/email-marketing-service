// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: otp_functions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createOTP = `-- name: CreateOTP :one
INSERT INTO
    otps (
        user_id,
        token,
        created_at,
        updated_at,
        expires_at
    )
VALUES (
        $1,
        $2,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        $3
    ) RETURNING id, user_id, token, created_at, updated_at, deleted_at, expires_at
`

type CreateOTPParams struct {
	UserID    uuid.UUID    `json:"user_id"`
	Token     string       `json:"token"`
	ExpiresAt sql.NullTime `json:"expires_at"`
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, createOTP, arg.UserID, arg.Token, arg.ExpiresAt)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteOTPById = `-- name: DeleteOTPById :exec
UPDATE otps SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1
`

func (q *Queries) DeleteOTPById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOTPById, id)
	return err
}

const getOTPByToken = `-- name: GetOTPByToken :one
SELECT id, user_id, token, created_at, updated_at, deleted_at, expires_at FROM otps WHERE token = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetOTPByToken(ctx context.Context, token string) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOTPByToken, token)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const hardDeleteOTPById = `-- name: HardDeleteOTPById :exec
DELETE FROM otps WHERE id = $1
`

func (q *Queries) HardDeleteOTPById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, hardDeleteOTPById, id)
	return err
}
