// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: template.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const checkTemplateExists = `-- name: CheckTemplateExists :one
SELECT EXISTS (
        SELECT 1
        FROM templates
        WHERE
            template_name = $1
            AND deleted_at IS NULL
    ) AS template_exists
`

func (q *Queries) CheckTemplateExists(ctx context.Context, templateName string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkTemplateExists, templateName)
	var template_exists bool
	err := row.Scan(&template_exists)
	return template_exists, err
}

const checkTemplateNameExists = `-- name: CheckTemplateNameExists :one
SELECT EXISTS (
        SELECT 1
        FROM templates
        WHERE
            template_name = $1
            AND user_id = $2
            AND deleted_at IS NULL
    ) AS template_exists
`

type CheckTemplateNameExistsParams struct {
	TemplateName string        `json:"template_name"`
	UserID       uuid.NullUUID `json:"user_id"`
}

func (q *Queries) CheckTemplateNameExists(ctx context.Context, arg CheckTemplateNameExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkTemplateNameExists, arg.TemplateName, arg.UserID)
	var template_exists bool
	err := row.Scan(&template_exists)
	return template_exists, err
}

const countGalleryTemplates = `-- name: CountGalleryTemplates :one
SELECT COUNT(*)
FROM templates
WHERE
    is_public_template = true
    AND is_gallery_template = true
    AND deleted_at IS NULL
`

func (q *Queries) CountGalleryTemplates(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countGalleryTemplates)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTemplatesByUserID = `-- name: CountTemplatesByUserID :one
SELECT COUNT(*)
FROM templates
WHERE
    user_id = $1
    AND deleted_at IS NULL
`

func (q *Queries) CountTemplatesByUserID(ctx context.Context, userID uuid.NullUUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTemplatesByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO
    templates (
        user_id,
        company_id,
        template_name,
        sender_name,
        from_email,
        subject,
        type,
        email_html,
        email_design,
        is_editable,
        is_published,
        is_public_template,
        is_gallery_template,
        tags,
        description,
        image_url,
        is_active,
        editor_type
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11,
        $12,
        $13,
        $14,
        $15,
        $16,
        $17,
        $18
    ) RETURNING id, user_id, company_id, template_name, sender_name, from_email, subject, type, email_html, email_design, is_editable, is_published, is_public_template, is_gallery_template, tags, description, image_url, is_active, editor_type, created_at, updated_at, deleted_at
`

type CreateTemplateParams struct {
	UserID            uuid.NullUUID         `json:"user_id"`
	CompanyID         uuid.NullUUID         `json:"company_id"`
	TemplateName      string                `json:"template_name"`
	SenderName        sql.NullString        `json:"sender_name"`
	FromEmail         sql.NullString        `json:"from_email"`
	Subject           sql.NullString        `json:"subject"`
	Type              string                `json:"type"`
	EmailHtml         sql.NullString        `json:"email_html"`
	EmailDesign       pqtype.NullRawMessage `json:"email_design"`
	IsEditable        sql.NullBool          `json:"is_editable"`
	IsPublished       sql.NullBool          `json:"is_published"`
	IsPublicTemplate  sql.NullBool          `json:"is_public_template"`
	IsGalleryTemplate sql.NullBool          `json:"is_gallery_template"`
	Tags              sql.NullString        `json:"tags"`
	Description       sql.NullString        `json:"description"`
	ImageUrl          sql.NullString        `json:"image_url"`
	IsActive          sql.NullBool          `json:"is_active"`
	EditorType        sql.NullString        `json:"editor_type"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error) {
	row := q.db.QueryRowContext(ctx, createTemplate,
		arg.UserID,
		arg.CompanyID,
		arg.TemplateName,
		arg.SenderName,
		arg.FromEmail,
		arg.Subject,
		arg.Type,
		arg.EmailHtml,
		arg.EmailDesign,
		arg.IsEditable,
		arg.IsPublished,
		arg.IsPublicTemplate,
		arg.IsGalleryTemplate,
		arg.Tags,
		arg.Description,
		arg.ImageUrl,
		arg.IsActive,
		arg.EditorType,
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.TemplateName,
		&i.SenderName,
		&i.FromEmail,
		&i.Subject,
		&i.Type,
		&i.EmailHtml,
		&i.EmailDesign,
		&i.IsEditable,
		&i.IsPublished,
		&i.IsPublicTemplate,
		&i.IsGalleryTemplate,
		&i.Tags,
		&i.Description,
		&i.ImageUrl,
		&i.IsActive,
		&i.EditorType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTemplateByID = `-- name: GetTemplateByID :one
SELECT
    t.id, t.user_id, t.company_id, t.template_name, t.sender_name, t.from_email, t.subject, t.type, t.email_html, t.email_design, t.is_editable, t.is_published, t.is_public_template, t.is_gallery_template, t.tags, t.description, t.image_url, t.is_active, t.editor_type, t.created_at, t.updated_at, t.deleted_at,
    u.fullname AS user_fullname,
    u.email AS user_email,
    u.picture AS user_picture,
    c.companyname AS company_name
FROM
    templates t
    LEFT JOIN users u ON t.user_id = u.id
    LEFT JOIN companies c ON t.company_id = c.id
WHERE
    t.id = $1
    AND (
        $2::uuid IS NULL
        OR t.user_id = $2::uuid
    )
    AND t.type = $3
    AND t.deleted_at IS NULL
ORDER BY t.created_at DESC
LIMIT 1
`

type GetTemplateByIDParams struct {
	TemplateID uuid.UUID     `json:"template_id"`
	UserID     uuid.NullUUID `json:"user_id"`
	Type       string        `json:"type"`
}

type GetTemplateByIDRow struct {
	ID                uuid.UUID             `json:"id"`
	UserID            uuid.NullUUID         `json:"user_id"`
	CompanyID         uuid.NullUUID         `json:"company_id"`
	TemplateName      string                `json:"template_name"`
	SenderName        sql.NullString        `json:"sender_name"`
	FromEmail         sql.NullString        `json:"from_email"`
	Subject           sql.NullString        `json:"subject"`
	Type              string                `json:"type"`
	EmailHtml         sql.NullString        `json:"email_html"`
	EmailDesign       pqtype.NullRawMessage `json:"email_design"`
	IsEditable        sql.NullBool          `json:"is_editable"`
	IsPublished       sql.NullBool          `json:"is_published"`
	IsPublicTemplate  sql.NullBool          `json:"is_public_template"`
	IsGalleryTemplate sql.NullBool          `json:"is_gallery_template"`
	Tags              sql.NullString        `json:"tags"`
	Description       sql.NullString        `json:"description"`
	ImageUrl          sql.NullString        `json:"image_url"`
	IsActive          sql.NullBool          `json:"is_active"`
	EditorType        sql.NullString        `json:"editor_type"`
	CreatedAt         sql.NullTime          `json:"created_at"`
	UpdatedAt         sql.NullTime          `json:"updated_at"`
	DeletedAt         sql.NullTime          `json:"deleted_at"`
	UserFullname      sql.NullString        `json:"user_fullname"`
	UserEmail         sql.NullString        `json:"user_email"`
	UserPicture       sql.NullString        `json:"user_picture"`
	CompanyName       sql.NullString        `json:"company_name"`
}

func (q *Queries) GetTemplateByID(ctx context.Context, arg GetTemplateByIDParams) (GetTemplateByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTemplateByID, arg.TemplateID, arg.UserID, arg.Type)
	var i GetTemplateByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.TemplateName,
		&i.SenderName,
		&i.FromEmail,
		&i.Subject,
		&i.Type,
		&i.EmailHtml,
		&i.EmailDesign,
		&i.IsEditable,
		&i.IsPublished,
		&i.IsPublicTemplate,
		&i.IsGalleryTemplate,
		&i.Tags,
		&i.Description,
		&i.ImageUrl,
		&i.IsActive,
		&i.EditorType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserFullname,
		&i.UserEmail,
		&i.UserPicture,
		&i.CompanyName,
	)
	return i, err
}

const getTemplateByIDGallery = `-- name: GetTemplateByIDGallery :one

SELECT t.id, t.user_id, t.company_id, t.template_name, t.sender_name, t.from_email, t.subject, t.type, t.email_html, t.email_design, t.is_editable, t.is_published, t.is_public_template, t.is_gallery_template, t.tags, t.description, t.image_url, t.is_active, t.editor_type, t.created_at, t.updated_at, t.deleted_at
FROM templates t
WHERE
    t.id = $1
    AND t.is_public_template = true
    AND t.is_gallery_template = true
    AND t.deleted_at IS NULL
ORDER BY t.created_at DESC
LIMIT 1
`

func (q *Queries) GetTemplateByIDGallery(ctx context.Context, templateID uuid.UUID) (Template, error) {
	row := q.db.QueryRowContext(ctx, getTemplateByIDGallery, templateID)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.TemplateName,
		&i.SenderName,
		&i.FromEmail,
		&i.Subject,
		&i.Type,
		&i.EmailHtml,
		&i.EmailDesign,
		&i.IsEditable,
		&i.IsPublished,
		&i.IsPublicTemplate,
		&i.IsGalleryTemplate,
		&i.Tags,
		&i.Description,
		&i.ImageUrl,
		&i.IsActive,
		&i.EditorType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTemplateByIDWithoutType = `-- name: GetTemplateByIDWithoutType :one
SELECT
    t.id, t.user_id, t.company_id, t.template_name, t.sender_name, t.from_email, t.subject, t.type, t.email_html, t.email_design, t.is_editable, t.is_published, t.is_public_template, t.is_gallery_template, t.tags, t.description, t.image_url, t.is_active, t.editor_type, t.created_at, t.updated_at, t.deleted_at,
    u.fullname AS user_fullname,
    u.email AS user_email,
    u.picture AS user_picture,
    c.companyname AS company_name
FROM
    templates t
    LEFT JOIN users u ON t.user_id = u.id
    LEFT JOIN companies c ON t.company_id = c.id
WHERE
    t.id = $1
    AND t.user_id = $2
    AND t.deleted_at IS NULL
ORDER BY t.created_at DESC
LIMIT 1
`

type GetTemplateByIDWithoutTypeParams struct {
	ID     uuid.UUID     `json:"id"`
	UserID uuid.NullUUID `json:"user_id"`
}

type GetTemplateByIDWithoutTypeRow struct {
	ID                uuid.UUID             `json:"id"`
	UserID            uuid.NullUUID         `json:"user_id"`
	CompanyID         uuid.NullUUID         `json:"company_id"`
	TemplateName      string                `json:"template_name"`
	SenderName        sql.NullString        `json:"sender_name"`
	FromEmail         sql.NullString        `json:"from_email"`
	Subject           sql.NullString        `json:"subject"`
	Type              string                `json:"type"`
	EmailHtml         sql.NullString        `json:"email_html"`
	EmailDesign       pqtype.NullRawMessage `json:"email_design"`
	IsEditable        sql.NullBool          `json:"is_editable"`
	IsPublished       sql.NullBool          `json:"is_published"`
	IsPublicTemplate  sql.NullBool          `json:"is_public_template"`
	IsGalleryTemplate sql.NullBool          `json:"is_gallery_template"`
	Tags              sql.NullString        `json:"tags"`
	Description       sql.NullString        `json:"description"`
	ImageUrl          sql.NullString        `json:"image_url"`
	IsActive          sql.NullBool          `json:"is_active"`
	EditorType        sql.NullString        `json:"editor_type"`
	CreatedAt         sql.NullTime          `json:"created_at"`
	UpdatedAt         sql.NullTime          `json:"updated_at"`
	DeletedAt         sql.NullTime          `json:"deleted_at"`
	UserFullname      sql.NullString        `json:"user_fullname"`
	UserEmail         sql.NullString        `json:"user_email"`
	UserPicture       sql.NullString        `json:"user_picture"`
	CompanyName       sql.NullString        `json:"company_name"`
}

func (q *Queries) GetTemplateByIDWithoutType(ctx context.Context, arg GetTemplateByIDWithoutTypeParams) (GetTemplateByIDWithoutTypeRow, error) {
	row := q.db.QueryRowContext(ctx, getTemplateByIDWithoutType, arg.ID, arg.UserID)
	var i GetTemplateByIDWithoutTypeRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.TemplateName,
		&i.SenderName,
		&i.FromEmail,
		&i.Subject,
		&i.Type,
		&i.EmailHtml,
		&i.EmailDesign,
		&i.IsEditable,
		&i.IsPublished,
		&i.IsPublicTemplate,
		&i.IsGalleryTemplate,
		&i.Tags,
		&i.Description,
		&i.ImageUrl,
		&i.IsActive,
		&i.EditorType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserFullname,
		&i.UserEmail,
		&i.UserPicture,
		&i.CompanyName,
	)
	return i, err
}

const hardDeleteTemplate = `-- name: HardDeleteTemplate :exec
DELETE FROM templates WHERE id = $1
`

func (q *Queries) HardDeleteTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, hardDeleteTemplate, id)
	return err
}

const listTemplates = `-- name: ListTemplates :many
SELECT
    t.id, t.user_id, t.company_id, t.template_name, t.sender_name, t.from_email, t.subject, t.type, t.email_html, t.email_design, t.is_editable, t.is_published, t.is_public_template, t.is_gallery_template, t.tags, t.description, t.image_url, t.is_active, t.editor_type, t.created_at, t.updated_at, t.deleted_at,
    u.fullname AS user_fullname,
    u.email AS user_email,
    c.companyname AS company_name
FROM
    templates t
    LEFT JOIN users u ON t.user_id = u.id
    LEFT JOIN companies c ON t.company_id = c.id
WHERE
    t.deleted_at IS NULL
ORDER BY t.created_at DESC
LIMIT $1
OFFSET
    $2
`

type ListTemplatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListTemplatesRow struct {
	ID                uuid.UUID             `json:"id"`
	UserID            uuid.NullUUID         `json:"user_id"`
	CompanyID         uuid.NullUUID         `json:"company_id"`
	TemplateName      string                `json:"template_name"`
	SenderName        sql.NullString        `json:"sender_name"`
	FromEmail         sql.NullString        `json:"from_email"`
	Subject           sql.NullString        `json:"subject"`
	Type              string                `json:"type"`
	EmailHtml         sql.NullString        `json:"email_html"`
	EmailDesign       pqtype.NullRawMessage `json:"email_design"`
	IsEditable        sql.NullBool          `json:"is_editable"`
	IsPublished       sql.NullBool          `json:"is_published"`
	IsPublicTemplate  sql.NullBool          `json:"is_public_template"`
	IsGalleryTemplate sql.NullBool          `json:"is_gallery_template"`
	Tags              sql.NullString        `json:"tags"`
	Description       sql.NullString        `json:"description"`
	ImageUrl          sql.NullString        `json:"image_url"`
	IsActive          sql.NullBool          `json:"is_active"`
	EditorType        sql.NullString        `json:"editor_type"`
	CreatedAt         sql.NullTime          `json:"created_at"`
	UpdatedAt         sql.NullTime          `json:"updated_at"`
	DeletedAt         sql.NullTime          `json:"deleted_at"`
	UserFullname      sql.NullString        `json:"user_fullname"`
	UserEmail         sql.NullString        `json:"user_email"`
	CompanyName       sql.NullString        `json:"company_name"`
}

func (q *Queries) ListTemplates(ctx context.Context, arg ListTemplatesParams) ([]ListTemplatesRow, error) {
	rows, err := q.db.QueryContext(ctx, listTemplates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTemplatesRow{}
	for rows.Next() {
		var i ListTemplatesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.TemplateName,
			&i.SenderName,
			&i.FromEmail,
			&i.Subject,
			&i.Type,
			&i.EmailHtml,
			&i.EmailDesign,
			&i.IsEditable,
			&i.IsPublished,
			&i.IsPublicTemplate,
			&i.IsGalleryTemplate,
			&i.Tags,
			&i.Description,
			&i.ImageUrl,
			&i.IsActive,
			&i.EditorType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserFullname,
			&i.UserEmail,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplatesByCompanyID = `-- name: ListTemplatesByCompanyID :many
SELECT
    t.id, t.user_id, t.company_id, t.template_name, t.sender_name, t.from_email, t.subject, t.type, t.email_html, t.email_design, t.is_editable, t.is_published, t.is_public_template, t.is_gallery_template, t.tags, t.description, t.image_url, t.is_active, t.editor_type, t.created_at, t.updated_at, t.deleted_at,
    u.fullname AS user_fullname,
    u.email AS user_email,
    u.picture AS user_picture,
    c.companyname AS company_name
FROM
    templates t
    LEFT JOIN users u ON t.user_id = u.id
    LEFT JOIN companies c ON t.company_id = c.id
WHERE
    t.company_id = $1
    AND t.deleted_at IS NULL
ORDER BY t.created_at DESC
LIMIT $2
OFFSET
    $3
`

type ListTemplatesByCompanyIDParams struct {
	CompanyID uuid.NullUUID `json:"company_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

type ListTemplatesByCompanyIDRow struct {
	ID                uuid.UUID             `json:"id"`
	UserID            uuid.NullUUID         `json:"user_id"`
	CompanyID         uuid.NullUUID         `json:"company_id"`
	TemplateName      string                `json:"template_name"`
	SenderName        sql.NullString        `json:"sender_name"`
	FromEmail         sql.NullString        `json:"from_email"`
	Subject           sql.NullString        `json:"subject"`
	Type              string                `json:"type"`
	EmailHtml         sql.NullString        `json:"email_html"`
	EmailDesign       pqtype.NullRawMessage `json:"email_design"`
	IsEditable        sql.NullBool          `json:"is_editable"`
	IsPublished       sql.NullBool          `json:"is_published"`
	IsPublicTemplate  sql.NullBool          `json:"is_public_template"`
	IsGalleryTemplate sql.NullBool          `json:"is_gallery_template"`
	Tags              sql.NullString        `json:"tags"`
	Description       sql.NullString        `json:"description"`
	ImageUrl          sql.NullString        `json:"image_url"`
	IsActive          sql.NullBool          `json:"is_active"`
	EditorType        sql.NullString        `json:"editor_type"`
	CreatedAt         sql.NullTime          `json:"created_at"`
	UpdatedAt         sql.NullTime          `json:"updated_at"`
	DeletedAt         sql.NullTime          `json:"deleted_at"`
	UserFullname      sql.NullString        `json:"user_fullname"`
	UserEmail         sql.NullString        `json:"user_email"`
	UserPicture       sql.NullString        `json:"user_picture"`
	CompanyName       sql.NullString        `json:"company_name"`
}

func (q *Queries) ListTemplatesByCompanyID(ctx context.Context, arg ListTemplatesByCompanyIDParams) ([]ListTemplatesByCompanyIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listTemplatesByCompanyID, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTemplatesByCompanyIDRow{}
	for rows.Next() {
		var i ListTemplatesByCompanyIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.TemplateName,
			&i.SenderName,
			&i.FromEmail,
			&i.Subject,
			&i.Type,
			&i.EmailHtml,
			&i.EmailDesign,
			&i.IsEditable,
			&i.IsPublished,
			&i.IsPublicTemplate,
			&i.IsGalleryTemplate,
			&i.Tags,
			&i.Description,
			&i.ImageUrl,
			&i.IsActive,
			&i.EditorType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserFullname,
			&i.UserEmail,
			&i.UserPicture,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplatesByType = `-- name: ListTemplatesByType :many
SELECT
    t.id, t.user_id, t.company_id, t.template_name, t.sender_name, t.from_email, t.subject, t.type, t.email_html, t.email_design, t.is_editable, t.is_published, t.is_public_template, t.is_gallery_template, t.tags, t.description, t.image_url, t.is_active, t.editor_type, t.created_at, t.updated_at, t.deleted_at,
    u.fullname AS user_fullname,
    u.email AS user_email,
    u.picture AS user_picture,
    c.companyname AS company_name
FROM
    templates t
    LEFT JOIN users u ON t.user_id = u.id
    LEFT JOIN companies c ON t.company_id = c.id
WHERE
    t.type = $1
    AND t.user_id = $2
    AND t.deleted_at IS NULL
    AND (
        $5 = ''
        OR t.template_name ILIKE '%' || $5 || '%'
    )
ORDER BY t.created_at DESC
LIMIT $3
OFFSET
    $4
`

type ListTemplatesByTypeParams struct {
	Type    string        `json:"type"`
	UserID  uuid.NullUUID `json:"user_id"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
	Column5 interface{}   `json:"column_5"`
}

type ListTemplatesByTypeRow struct {
	ID                uuid.UUID             `json:"id"`
	UserID            uuid.NullUUID         `json:"user_id"`
	CompanyID         uuid.NullUUID         `json:"company_id"`
	TemplateName      string                `json:"template_name"`
	SenderName        sql.NullString        `json:"sender_name"`
	FromEmail         sql.NullString        `json:"from_email"`
	Subject           sql.NullString        `json:"subject"`
	Type              string                `json:"type"`
	EmailHtml         sql.NullString        `json:"email_html"`
	EmailDesign       pqtype.NullRawMessage `json:"email_design"`
	IsEditable        sql.NullBool          `json:"is_editable"`
	IsPublished       sql.NullBool          `json:"is_published"`
	IsPublicTemplate  sql.NullBool          `json:"is_public_template"`
	IsGalleryTemplate sql.NullBool          `json:"is_gallery_template"`
	Tags              sql.NullString        `json:"tags"`
	Description       sql.NullString        `json:"description"`
	ImageUrl          sql.NullString        `json:"image_url"`
	IsActive          sql.NullBool          `json:"is_active"`
	EditorType        sql.NullString        `json:"editor_type"`
	CreatedAt         sql.NullTime          `json:"created_at"`
	UpdatedAt         sql.NullTime          `json:"updated_at"`
	DeletedAt         sql.NullTime          `json:"deleted_at"`
	UserFullname      sql.NullString        `json:"user_fullname"`
	UserEmail         sql.NullString        `json:"user_email"`
	UserPicture       sql.NullString        `json:"user_picture"`
	CompanyName       sql.NullString        `json:"company_name"`
}

func (q *Queries) ListTemplatesByType(ctx context.Context, arg ListTemplatesByTypeParams) ([]ListTemplatesByTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, listTemplatesByType,
		arg.Type,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.Column5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTemplatesByTypeRow{}
	for rows.Next() {
		var i ListTemplatesByTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.TemplateName,
			&i.SenderName,
			&i.FromEmail,
			&i.Subject,
			&i.Type,
			&i.EmailHtml,
			&i.EmailDesign,
			&i.IsEditable,
			&i.IsPublished,
			&i.IsPublicTemplate,
			&i.IsGalleryTemplate,
			&i.Tags,
			&i.Description,
			&i.ImageUrl,
			&i.IsActive,
			&i.EditorType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserFullname,
			&i.UserEmail,
			&i.UserPicture,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplatesByTypeGallery = `-- name: ListTemplatesByTypeGallery :many
SELECT t.id, t.user_id, t.company_id, t.template_name, t.sender_name, t.from_email, t.subject, t.type, t.email_html, t.email_design, t.is_editable, t.is_published, t.is_public_template, t.is_gallery_template, t.tags, t.description, t.image_url, t.is_active, t.editor_type, t.created_at, t.updated_at, t.deleted_at
FROM templates t
WHERE
    t.type = $1
    AND t.is_public_template = true
    AND t.is_gallery_template = true
    AND t.deleted_at IS NULL
    AND (
        $2 = ''
        OR t.template_name ILIKE '%' || $2 || '%'
    )
ORDER BY t.created_at DESC
LIMIT $4
OFFSET
    $3
`

type ListTemplatesByTypeGalleryParams struct {
	TemplateType   string      `json:"template_type"`
	TemplateSearch interface{} `json:"template_search"`
	RowOffset      int32       `json:"row_offset"`
	RowLimit       int32       `json:"row_limit"`
}

func (q *Queries) ListTemplatesByTypeGallery(ctx context.Context, arg ListTemplatesByTypeGalleryParams) ([]Template, error) {
	rows, err := q.db.QueryContext(ctx, listTemplatesByTypeGallery,
		arg.TemplateType,
		arg.TemplateSearch,
		arg.RowOffset,
		arg.RowLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Template{}
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.TemplateName,
			&i.SenderName,
			&i.FromEmail,
			&i.Subject,
			&i.Type,
			&i.EmailHtml,
			&i.EmailDesign,
			&i.IsEditable,
			&i.IsPublished,
			&i.IsPublicTemplate,
			&i.IsGalleryTemplate,
			&i.Tags,
			&i.Description,
			&i.ImageUrl,
			&i.IsActive,
			&i.EditorType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplatesByUserID = `-- name: ListTemplatesByUserID :many
SELECT
    t.id, t.user_id, t.company_id, t.template_name, t.sender_name, t.from_email, t.subject, t.type, t.email_html, t.email_design, t.is_editable, t.is_published, t.is_public_template, t.is_gallery_template, t.tags, t.description, t.image_url, t.is_active, t.editor_type, t.created_at, t.updated_at, t.deleted_at,
    u.fullname AS user_fullname,
    u.email AS user_email,
    u.picture AS user_picture,
    c.companyname AS company_name
FROM
    templates t
    LEFT JOIN users u ON t.user_id = u.id
    LEFT JOIN companies c ON t.company_id = c.id
WHERE
    t.user_id = $1
    AND t.deleted_at IS NULL
ORDER BY t.created_at DESC
LIMIT $2
OFFSET
    $3
`

type ListTemplatesByUserIDParams struct {
	UserID uuid.NullUUID `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

type ListTemplatesByUserIDRow struct {
	ID                uuid.UUID             `json:"id"`
	UserID            uuid.NullUUID         `json:"user_id"`
	CompanyID         uuid.NullUUID         `json:"company_id"`
	TemplateName      string                `json:"template_name"`
	SenderName        sql.NullString        `json:"sender_name"`
	FromEmail         sql.NullString        `json:"from_email"`
	Subject           sql.NullString        `json:"subject"`
	Type              string                `json:"type"`
	EmailHtml         sql.NullString        `json:"email_html"`
	EmailDesign       pqtype.NullRawMessage `json:"email_design"`
	IsEditable        sql.NullBool          `json:"is_editable"`
	IsPublished       sql.NullBool          `json:"is_published"`
	IsPublicTemplate  sql.NullBool          `json:"is_public_template"`
	IsGalleryTemplate sql.NullBool          `json:"is_gallery_template"`
	Tags              sql.NullString        `json:"tags"`
	Description       sql.NullString        `json:"description"`
	ImageUrl          sql.NullString        `json:"image_url"`
	IsActive          sql.NullBool          `json:"is_active"`
	EditorType        sql.NullString        `json:"editor_type"`
	CreatedAt         sql.NullTime          `json:"created_at"`
	UpdatedAt         sql.NullTime          `json:"updated_at"`
	DeletedAt         sql.NullTime          `json:"deleted_at"`
	UserFullname      sql.NullString        `json:"user_fullname"`
	UserEmail         sql.NullString        `json:"user_email"`
	UserPicture       sql.NullString        `json:"user_picture"`
	CompanyName       sql.NullString        `json:"company_name"`
}

func (q *Queries) ListTemplatesByUserID(ctx context.Context, arg ListTemplatesByUserIDParams) ([]ListTemplatesByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listTemplatesByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTemplatesByUserIDRow{}
	for rows.Next() {
		var i ListTemplatesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyID,
			&i.TemplateName,
			&i.SenderName,
			&i.FromEmail,
			&i.Subject,
			&i.Type,
			&i.EmailHtml,
			&i.EmailDesign,
			&i.IsEditable,
			&i.IsPublished,
			&i.IsPublicTemplate,
			&i.IsGalleryTemplate,
			&i.Tags,
			&i.Description,
			&i.ImageUrl,
			&i.IsActive,
			&i.EditorType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserFullname,
			&i.UserEmail,
			&i.UserPicture,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteTemplate = `-- name: SoftDeleteTemplate :exec
UPDATE templates
SET
    deleted_at = CURRENT_TIMESTAMP
WHERE
    id = $1
    AND user_id = $2
    AND deleted_at IS NULL
`

type SoftDeleteTemplateParams struct {
	ID     uuid.UUID     `json:"id"`
	UserID uuid.NullUUID `json:"user_id"`
}

func (q *Queries) SoftDeleteTemplate(ctx context.Context, arg SoftDeleteTemplateParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteTemplate, arg.ID, arg.UserID)
	return err
}

const updateTemplate = `-- name: UpdateTemplate :one
UPDATE templates
SET
    template_name = COALESCE($1, template_name),
    sender_name = COALESCE($2, sender_name),
    from_email = COALESCE($3, from_email),
    subject = COALESCE($4, subject),
    type = COALESCE($5, type),
    email_html = COALESCE($6, email_html),
    email_design = COALESCE($7, email_design),
    is_editable = COALESCE($8, is_editable),
    is_published = COALESCE($9, is_published),
    is_public_template = COALESCE($10, is_public_template),
    is_gallery_template = COALESCE($11, is_gallery_template),
    tags = COALESCE($12, tags),
    description = COALESCE($13, description),
    image_url = COALESCE($14, image_url),
    is_active = COALESCE($15, is_active),
    editor_type = COALESCE($16, editor_type),
    updated_at = CURRENT_TIMESTAMP
WHERE
    id = $17
    AND user_id = $18
    AND deleted_at IS NULL RETURNING id, user_id, company_id, template_name, sender_name, from_email, subject, type, email_html, email_design, is_editable, is_published, is_public_template, is_gallery_template, tags, description, image_url, is_active, editor_type, created_at, updated_at, deleted_at
`

type UpdateTemplateParams struct {
	TemplateName      string                `json:"template_name"`
	SenderName        sql.NullString        `json:"sender_name"`
	FromEmail         sql.NullString        `json:"from_email"`
	Subject           sql.NullString        `json:"subject"`
	Type              string                `json:"type"`
	EmailHtml         sql.NullString        `json:"email_html"`
	EmailDesign       pqtype.NullRawMessage `json:"email_design"`
	IsEditable        sql.NullBool          `json:"is_editable"`
	IsPublished       sql.NullBool          `json:"is_published"`
	IsPublicTemplate  sql.NullBool          `json:"is_public_template"`
	IsGalleryTemplate sql.NullBool          `json:"is_gallery_template"`
	Tags              sql.NullString        `json:"tags"`
	Description       sql.NullString        `json:"description"`
	ImageUrl          sql.NullString        `json:"image_url"`
	IsActive          sql.NullBool          `json:"is_active"`
	EditorType        sql.NullString        `json:"editor_type"`
	ID                uuid.UUID             `json:"id"`
	UserID            uuid.NullUUID         `json:"user_id"`
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) (Template, error) {
	row := q.db.QueryRowContext(ctx, updateTemplate,
		arg.TemplateName,
		arg.SenderName,
		arg.FromEmail,
		arg.Subject,
		arg.Type,
		arg.EmailHtml,
		arg.EmailDesign,
		arg.IsEditable,
		arg.IsPublished,
		arg.IsPublicTemplate,
		arg.IsGalleryTemplate,
		arg.Tags,
		arg.Description,
		arg.ImageUrl,
		arg.IsActive,
		arg.EditorType,
		arg.ID,
		arg.UserID,
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.TemplateName,
		&i.SenderName,
		&i.FromEmail,
		&i.Subject,
		&i.Type,
		&i.EmailHtml,
		&i.EmailDesign,
		&i.IsEditable,
		&i.IsPublished,
		&i.IsPublicTemplate,
		&i.IsGalleryTemplate,
		&i.Tags,
		&i.Description,
		&i.ImageUrl,
		&i.IsActive,
		&i.EditorType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
