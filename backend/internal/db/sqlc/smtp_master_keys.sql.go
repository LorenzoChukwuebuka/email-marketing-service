// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: smtp_master_keys.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const checkSMTPMasterKeyExists = `-- name: CheckSMTPMasterKeyExists :one
SELECT EXISTS (
        SELECT 1
        FROM smtp_master_keys
        WHERE
            smtp_login = $1
            AND password = $2
            AND deleted_at IS NULL
    ) AS exists
`

type CheckSMTPMasterKeyExistsParams struct {
	SmtpLogin string `json:"smtp_login"`
	Password  string `json:"password"`
}

func (q *Queries) CheckSMTPMasterKeyExists(ctx context.Context, arg CheckSMTPMasterKeyExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkSMTPMasterKeyExists, arg.SmtpLogin, arg.Password)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createSMTPMasterKey = `-- name: CreateSMTPMasterKey :one
INSERT INTO
    smtp_master_keys (
        user_id,
        company_id,
        smtp_login,
        key_name,
        password,
        status
    )
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, user_id, company_id, smtp_login, key_name, password, status, created_at, updated_at, deleted_at
`

type CreateSMTPMasterKeyParams struct {
	UserID    uuid.UUID `json:"user_id"`
	CompanyID uuid.UUID `json:"company_id"`
	SmtpLogin string    `json:"smtp_login"`
	KeyName   string    `json:"key_name"`
	Password  string    `json:"password"`
	Status    string    `json:"status"`
}

func (q *Queries) CreateSMTPMasterKey(ctx context.Context, arg CreateSMTPMasterKeyParams) (SmtpMasterKey, error) {
	row := q.db.QueryRowContext(ctx, createSMTPMasterKey,
		arg.UserID,
		arg.CompanyID,
		arg.SmtpLogin,
		arg.KeyName,
		arg.Password,
		arg.Status,
	)
	var i SmtpMasterKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.SmtpLogin,
		&i.KeyName,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getMasterSMTPKey = `-- name: GetMasterSMTPKey :one
SELECT id, user_id, company_id, smtp_login, key_name, password, status, created_at, updated_at, deleted_at FROm smtp_master_keys WHERE user_id = $1
`

func (q *Queries) GetMasterSMTPKey(ctx context.Context, userID uuid.UUID) (SmtpMasterKey, error) {
	row := q.db.QueryRowContext(ctx, getMasterSMTPKey, userID)
	var i SmtpMasterKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.SmtpLogin,
		&i.KeyName,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSMTPMasterKeyAndPass = `-- name: GetSMTPMasterKeyAndPass :one
SELECT id, user_id, company_id, smtp_login, key_name, password, status, created_at, updated_at, deleted_at
FROM smtp_master_keys
WHERE
    key_name = $1
    AND password = $2
    AND deleted_at IS NULL
LIMIT 1
`

type GetSMTPMasterKeyAndPassParams struct {
	KeyName  string `json:"key_name"`
	Password string `json:"password"`
}

func (q *Queries) GetSMTPMasterKeyAndPass(ctx context.Context, arg GetSMTPMasterKeyAndPassParams) (SmtpMasterKey, error) {
	row := q.db.QueryRowContext(ctx, getSMTPMasterKeyAndPass, arg.KeyName, arg.Password)
	var i SmtpMasterKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyID,
		&i.SmtpLogin,
		&i.KeyName,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateSMTPKeyMasterPasswordAndLogin = `-- name: UpdateSMTPKeyMasterPasswordAndLogin :exec
UPDATE smtp_master_keys
SET password = $1,
smtp_login = $2
WHERE
    user_id = $3
`

type UpdateSMTPKeyMasterPasswordAndLoginParams struct {
	Password  string    `json:"password"`
	SmtpLogin string    `json:"smtp_login"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateSMTPKeyMasterPasswordAndLogin(ctx context.Context, arg UpdateSMTPKeyMasterPasswordAndLoginParams) error {
	_, err := q.db.ExecContext(ctx, updateSMTPKeyMasterPasswordAndLogin, arg.Password, arg.SmtpLogin, arg.UserID)
	return err
}
