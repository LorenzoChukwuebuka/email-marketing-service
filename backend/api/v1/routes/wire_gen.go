// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package routes

import (
	"email-marketing-service/api/v1/controllers"
	"email-marketing-service/api/v1/controllers/admin"
	"email-marketing-service/api/v1/repository"
	"email-marketing-service/api/v1/repository/admin"
	"email-marketing-service/api/v1/services"
	"email-marketing-service/api/v1/services/admin"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeUserController(db *gorm.DB) (*controllers.UserController, error) {
	userRepository := repository.NewUserRepository(db)
	otpRepository := repository.NewOTPRepository(db)
	otpService := services.NewOTPService(otpRepository)
	planRepository := repository.NewPlanRepository(db)
	subscriptionRepository := repository.NewSubscriptionRepository(db)
	billingRepository := repository.NewBillingRepository(db)
	dailyMailCalcRepository := repository.NewDailyMailCalcRepository(db)
	smtpKeyRepository := repository.NewSMTPkeyRepository(db)
	userService := services.NewUserService(userRepository, otpService, planRepository, subscriptionRepository, billingRepository, dailyMailCalcRepository, smtpKeyRepository)
	userController := controllers.NewUserController(userService)
	return userController, nil
}

func InitializePlanController(db *gorm.DB) (*controllers.PlanController, error) {
	planRepository := repository.NewPlanRepository(db)
	planService := services.NewPlanService(planRepository)
	planController := controllers.NewPlanController(planService)
	return planController, nil
}

func InitializeAPIKeyController(db *gorm.DB) (*controllers.ApiKeyController, error) {
	apiKeyRepository := repository.NewAPIkeyRepository(db)
	apiKeyService := services.NewAPIKeyService(apiKeyRepository)
	apiKeyController := controllers.NewAPIKeyController(apiKeyService)
	return apiKeyController, nil
}

func InitializeUserssionController(db *gorm.DB) (*controllers.UserSessionController, error) {
	userSessionRepository := repository.NewUserSessionRepository(db)
	userRepository := repository.NewUserRepository(db)
	userSessionService := services.NewUserSessionService(userSessionRepository, userRepository)
	userSessionController := controllers.NewUserSessionController(userSessionService)
	return userSessionController, nil
}

func InitializeTransactionController(db *gorm.DB) (*controllers.TransactionController, error) {
	billingRepository := repository.NewBillingRepository(db)
	subscriptionRepository := repository.NewSubscriptionRepository(db)
	dailyMailCalcRepository := repository.NewDailyMailCalcRepository(db)
	planRepository := repository.NewPlanRepository(db)
	subscriptionService := services.NewSubscriptionService(subscriptionRepository, dailyMailCalcRepository, planRepository)
	userRepository := repository.NewUserRepository(db)
	billingService := services.NewBillingService(billingRepository, subscriptionService, userRepository, subscriptionRepository, planRepository)
	transactionController := controllers.NewTransactionController(billingService)
	return transactionController, nil
}

func InitializeSMTPController(db *gorm.DB) (*controllers.SMTPMailController, error) {
	apiKeyRepository := repository.NewAPIkeyRepository(db)
	apiKeyService := services.NewAPIKeyService(apiKeyRepository)
	subscriptionRepository := repository.NewSubscriptionRepository(db)
	dailyMailCalcRepository := repository.NewDailyMailCalcRepository(db)
	userRepository := repository.NewUserRepository(db)
	mailStatusRepository := repository.NewMailStatusRepository(db)
	smtpMailService := services.NewSMTPMailService(apiKeyService, subscriptionRepository, dailyMailCalcRepository, userRepository, mailStatusRepository)
	smtpMailController := controllers.NewSMTPMailController(apiKeyService, smtpMailService)
	return smtpMailController, nil
}

func InitializeSMTPKeyController(db *gorm.DB) (*controllers.SMTPKeyController, error) {
	smtpKeyRepository := repository.NewSMTPkeyRepository(db)
	smtpKeyService := services.NewSMTPKeyService(smtpKeyRepository)
	smtpKeyController := controllers.NewSMTPKeyController(smtpKeyService)
	return smtpKeyController, nil
}

func InitializeSubscriptionController(db *gorm.DB) (*controllers.SubscriptionController, error) {
	subscriptionRepository := repository.NewSubscriptionRepository(db)
	dailyMailCalcRepository := repository.NewDailyMailCalcRepository(db)
	planRepository := repository.NewPlanRepository(db)
	subscriptionService := services.NewSubscriptionService(subscriptionRepository, dailyMailCalcRepository, planRepository)
	subscriptionController := controllers.NewSubscriptionController(subscriptionService)
	return subscriptionController, nil
}

func InitialiazePlanController(db *gorm.DB) (*controllers.PlanController, error) {
	planRepository := repository.NewPlanRepository(db)
	planService := services.NewPlanService(planRepository)
	planController := controllers.NewPlanController(planService)
	return planController, nil
}

func InitializeAdminController(db *gorm.DB) (*adminController.AdminController, error) {
	adminRepository := adminrepository.NewAdminRepository(db)
	adminService := adminservice.NewAdminService(adminRepository)
	adminControllerAdminController := adminController.NewAdminController(adminService)
	return adminControllerAdminController, nil
}

func InitializeSupportTicketController(db *gorm.DB) (*controllers.SupportTicketController, error) {
	supportRepository := repository.NewSupportRepository(db)
	userRepository := repository.NewUserRepository(db)
	supportTicketService := services.NewSupportTicketService(supportRepository, userRepository)
	supportTicketController := controllers.NewTicketController(supportTicketService)
	return supportTicketController, nil
}

func InitializeContactController(db *gorm.DB) (*controllers.ContactController, error) {
	contactRepository := repository.NewContactRepository(db)
	contactService := services.NewContactService(contactRepository)
	userRepository := repository.NewUserRepository(db)
	subscriptionRepository := repository.NewSubscriptionRepository(db)
	contactController := controllers.NewContactController(contactService, userRepository, subscriptionRepository)
	return contactController, nil
}

func InitializeTemplateController(db *gorm.DB) (*controllers.TemplateController, error) {
	templateRepository := repository.NewTemplateRepository(db)
	templateService := services.NewTemplateService(templateRepository)
	templateController := controllers.NewTemplateController(templateService)
	return templateController, nil
}
